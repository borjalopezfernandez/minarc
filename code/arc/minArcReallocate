#!/usr/bin/env ruby

# == Synopsis
#
# This is a minARC command line tool that reallocates a given file previously archived. 
# Archive reallocation is meant by changing the directory location.
# If reallocated file is not already archived in the system, an error will be raised.
# 
# 
# -f flag:
#
# Mandatory flag, stands for "--file".
# This option is used to specify the file to be reallocated. 
# File must be specified with the full path location of the new storage directory.
#
# -d flag:
#
# Mandatory flag, stands for "--directory".
#
#
# == Usage
# minArcReallocate -f <full_path_file> [-R]
#     --file <full_path_file>    it specifies the file to be reallocated
#     --directory <full_path>    it specifies the directory containing files
#     --Recursive                recursivity through directory
#     --help                     shows this help
#     --Usage                    shows the usage
#     --Debug                    shows Debug info during the execution
#     --version                  shows version number
# 

require 'rubygems'
require 'getoptlong'
require 'rdoc'

require 'cuc/Log4rLoggerFactory'

require 'arc/MINARC_Environment'
require 'arc/FileArchiver'


# MAIN script function
def main

   include ARC
   
   @full_path_filename     = ""
   @full_path_dir          = ""
   @filename               = ""
   @filetype               = ""
   @isDebugMode            = false
   @bDelete                = false
   @bMove                  = false
   @bUnpack                = false
   bShowFileTypes          = false
   @bShowVersion           = false
   @arrAddFields           = Array.new
   @bRecursive             = true
   @bUpdate                = false
   
   opts = GetoptLong.new(
     ["--file", "-f",               GetoptLong::REQUIRED_ARGUMENT],
     ["--directory", "-d",          GetoptLong::REQUIRED_ARGUMENT],
     ["--type", "-t",               GetoptLong::REQUIRED_ARGUMENT],
     ["--additional-fields", "-a",  GetoptLong::REQUIRED_ARGUMENT],
     ["--Recursive", "-R",          GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",              GetoptLong::NO_ARGUMENT],
     ["--Usage", "-g",              GetoptLong::NO_ARGUMENT],
     ["--version", "-v",            GetoptLong::NO_ARGUMENT],
     ["--help", "-h",               GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt      
            when "--Debug"             then @isDebugMode          = true
            when "--version"           then @bShowVersion         = true
	         when "--file"              then @full_path_filename   = arg.to_s
            when "--directory"         then @full_path_dir        = arg.to_s
	         when "--type"              then @filetype             = arg.to_s
            when "--additional-fields" then @arrAddFields         = arg.to_s.split(":")
			   when "--help"              then usage
	         when "--usage"             then usage
            when "--Recursive"         then @bRecursive  = true
         end
      end
   rescue Exception
      exit(99)
   end

   # -------------------------------------------------------

   if @bShowVersion == true then
      print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{ARC::VERSION}]", "\n")
      hRecord = ARC::CHANGE_RECORD
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      exit(0)
   end

   # -------------------------------------------------------

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   # -------------------------------------------------------
 
   require 'arc/MINARC_DatabaseModel'
 
   # -------------------------------------------------------

   ## ------------------------------------------------------

   @minArcConfigDir       = ENV['MINARC_CONFIG']

   ## initialise the logger
   loggerFactory = CUC::Log4rLoggerFactory.new("Realloc  ", "#{@minArcConfigDir}/minarc_log_config.xml")
   
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
      
   @logger = loggerFactory.getLogger
   
   if @logger == nil then
      puts
		puts "Could not initialize logging system !  :-("
      puts "Check minARC logs configuration under \"#{@minArcConfigDir}/minarc_log_config.xml\"" 
		exit(99)
   end

   ## ------------------------------------------------------

   if @full_path_filename == "" and @full_path_dir == "" then
      usage
   end
   
   if @full_path_filename != "" and @full_path_dir != "" then
      usage
   end

   if @full_path_dir != "" then
      reallocateDir(@full_path_dir)
      exit(0)
   end
   
   if @full_path_filename.slice(0,1) != "/" then
      puts
      puts "File must be specified with a full path"
      puts
      exit(99)
   end

   @filename   = File.basename(@full_path_filename)
   @full_path  = File.dirname(@full_path_filename)

   # Check the additional field list
   if @arrAddFields.size != 0 and @arrAddFields.size.modulo(2) != 0 then
      puts "Invalid additional-fields list ! :-("
      puts
      exit(99)
   end

   archiver  = ARC::FileArchiver.new
   
   if @isDebugMode then
      archiver.setDebugMode
   end

   ret = archiver.reallocate(@full_path_filename)
   
   if ret == false then
      @logger.error("[ARC_615] #{@filename} could not be reallocated to #{@full_path}")
      exit(99)
   end

   @logger.info("[ARC_301] #{@filename} path reallocated to #{@full_path}")
  
   exit(0)

end

## ---------------------------------------------------------

def reallocateDir(directory)
   pwd = Dir.pwd

   archiver  = ARC::FileArchiver.new
   
   if @isDebugMode then
      archiver.setDebugMode
   end

   Dir.chdir(directory)

   fp  = Dir.pwd

   arrFiles = Dir["*"]

   arrFiles.each{|aFile|
      
      if File.directory?(aFile) == true and @bRecursive == true then
         reallocateDir(aFile)
      end
      
      strFile = "#{fp}/#{aFile}"
   
      puts strFile
   
      ret = archiver.reallocate(strFile)
   
      if ret == false then
         @logger.error("[ARC_615] #{aFile} could not be reallocated to #{strFile}")
         next
      else
         @logger.info("[ARC_301] #{aFile} path reallocated to #{strFile}")
      end
   }

   Dir.chdir(pwd)

end

## ---------------------------------------------------------

def usage

   fullpathFile = File.expand_path(__FILE__)
      
   value = `#{"head -30 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
   
end

## ---------------------------------------------------------


## =============================================================================
## Start of the main body
main
## End of the main body
## =============================================================================
