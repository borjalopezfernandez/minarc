#!/usr/bin/env ruby

#########################################################################
###
### === Ruby source for #MINARC_TestCases class
###
### === Written by DEIMOS Space S.L. (bolf)
###
### === Mini Archive Component (MinArc)
### 
### module MINARC
###
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'ctc/WrapperCURL'
require 'ctc/API_MINARC_OData'

require 'arc/MINARC_Environment'
require 'arc/MINARC_Client'
require 'arc/MINARC_Status'
require 'arc/ReadMinarcConfig'

### rake -f build_minarc.rake minarc:install[naosboa,orc_boa,naos_test_pg]

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed

##  1  - testStore

class TestCaseMINARC_NAOS < Test::Unit::TestCase

   include CTC::WrapperCURL

   include CUC::DirUtils
   include ARC
   include ARC_ODATA

   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   # --------------------------------------------------------
   
   Test::Unit.at_start do      
      
      system("clear")
      
      puts
      puts "======================================"
      puts "MINARC Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      if c != 'Y' then
         exit(99)
      end
      
      system("mkdir -p /tmp/minarc/archive_root")
      system("mkdir -p /tmp/minarc/tmp")
      system("mkdir -p /tmp/minarc_root")
      
      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config

      if @@conf.wrapper_check_environment == false then
         puts "minArc environment not suited for unit tests"
         puts
         exit(99)
      end

      puts      
      @@conf.wrapper_print_environment
      puts
 
      @@arcConfigDir = File.join(File.dirname(File.expand_path(__FILE__)), "../../config")
      puts
      puts @@arcConfigDir
      puts
      
      
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("ARCTEST", "#{@@arcConfigDir}/minarc_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in OrchestratorIngester::initialize"
     	   puts "Could not initialize logging system !  :-("
         puts "Check minARC logs configuration under \"#{@@arcConfigDir}/minarc_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

      @@logger.info("TEST")


      begin
         cmd = "minArcDB -d"
         @@logger.debug(cmd)
         ret = system(cmd)

         cmd = "minArcDB -c"
         @@logger.debug(cmd)
         ret = system(cmd)
         
         cmd = "minArcDB -a test:test"
         @@logger.debug(cmd)
         ret = system(cmd)
         
      rescue Exception => e
      end

      begin
         cmd = "minArcPurge -Y"
         @@logger.debug(cmd)
         # ret = system(cmd)
      rescue
      end

      @@prevDir = Dir.pwd
      @@testDataDir        = File.join( File.dirname(File.expand_path(__FILE__)), "plugins/test" )     
      Dir.chdir(@@testDataDir)
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      system("echo \'S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      Dir.chdir(@@prevDir)

      system("minArcServer -k")
      prevDir = Dir.pwd
      Dir.chdir(ENV['MINARC_TMP'])
      
            
      puts "init server"
      FileUtils.rm_f("#{ENV['MINARC_TMP']}/minarc_server.out")
      # @serverPID = spawn("minArcServer -s > #{ENV['MINARC_TMP']}/minarc_server.out 2>&1")
      @serverPID = spawn("minArcServer -s > #{ENV['MINARC_TMP']}/minarc_server.out 2>&1")
      Dir.chdir (prevDir)
      puts @serverPID

      sleep(2.0)

      @@arrInputFiles = [ \
                           "NS1_OPER_CNF_CONT___20220706T000000_20220709T000000_0001.xml", \
                           "NS1_OPER_ORB_OEM____20220709T000000_20220717T000000_0001.OEM", \
                           "NS1_OPER_TM__GPS____20220706T000000_20220709T000000_0001.xml", \
                           "NS1_OPER_TM__THR____20220706T000000_20220709T000000_0001.xml", \
                           "NS1_OPER_TM__MSC____20220706T000000_20220709T000000_0001.xml", \
                           "NS1_OPER_ORB_OPM____20220709T000000_20220709T000000_0001.OPM", \
                           "NS1_OPER_ORB_SOERT__20220709T000000_20220717T000000_0001.OPM", \
                           "NS1_OPER_PLA_GSP____20220709T000000_20220717T000000_0001.xml", \
                           "NS1_OPER_PLA_MAINT__20220709T000000_20220717T000000_0001.xml", \
                           "NS1_OPER_PLA_MAN____20220709T000000_20220717T000000_0001.xml", \
                           "NS1_OPER_PLA_SBA____20220710T000000_20220717T000000_0001.xml", \
                           "NS1_TEST_PLA_SBA____20220710T000000_20220717T000000_0001.tcl", \
                           "NAOS1_20220708T0047.tle", \
                           "NS1_OPER_CNF_OAT____20220709T004210_20220716T230832_0001.EEF", \
                           "NS1_OPER_PLA_SCR____20220710T000000_20220712T000000_0001.xml", \
                           "NS1_OPER_PLA_OSC____20220710T000000_20220715T000000_0001.xml", \
                           "TRK_NAOS1_TG1_ANG_20221004000000.GEO", \
                           "TRK_NAOS1_TG1_RAN_20221004000000.GEO", \
                           "TRK_NAOS1_TG2_ANG_20221004000000.GEO", \
                           "TRK_NAOS1_TG2_RAN_20221004000000.GEO", \
                           "NS1_OPER_SCH_REQ____20220706T000000_20220709T000000_0001.XML" \
                           ]
                       
   end
   
   # --------------------------------------------------------
   
   Test::Unit.at_exit do
      @@logger.info("START => TestCaseMINARC_NAOS::#{__method__.to_s}")
      @@logger.info("END   => TestCaseMINARC_NAOS::#{__method__.to_s}")
   end
   
   # --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      @@logger.info("START => TestCaseMINARC_NAOS::#{__method__.to_s}")
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts


      cmd = "minArcDB -d"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "minArcDB -c"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcDB first time")
      
      cmd = "minArcDB -a test:test"
      @@logger.debug(cmd)
      assert(system(cmd), "created used test")
      
      
      
      system("\\rm -rf /tmp/minarc_log_file*.log")
      
      cmd = "minArcPurge -Y"
      ret = system(cmd)

      if ret == false then
         puts "Error when cleaning the minarc root directory ! :-("
         puts
         exit(99)
      end

      
      @path = "#{ENV['MINARC_BASE']}/code/arc"
      
      Dir.chdir(@@testDataDir)
      Dir.chdir(@@prevDir)    

      @@logger.info("END   => TestCaseMINARC_NAOS::#{__method__.to_s}")
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      @@logger.info("START => TestCaseMINARC_NAOS::#{__method__.to_s}")
      @@logger.info("END   => TestCaseMINARC_NAOS::#{__method__.to_s}")
   end
   ## ------------------------------------------------------

   def testStore
      @@logger.info("START => TestCaseMINARC_NAOS::#{__method__.to_s}")

      system("mkdir -p /tmp/minarc/tmp/")
      
      @@arrInputFiles.each{|filename|
         @@logger.debug("TestCaseMINARC_NAOS::#{__method__.to_s} #{filename}")
         system("echo \'#{filename}\' > /tmp/minarc/tmp/#{filename}")
         cmd = "minArcStore -t NAOS -f \"/tmp/minarc/tmp/#{filename}\" --noserver -D"
         @@logger.debug(cmd)
         assert(system(cmd), "store of #{filename}")

         if filename.include?(".tcl") == true then
            cmd = "minArcStatus -f #{filename.gsub!("_PLA_", "_TCL_")} --noserver | jq"
         else
            cmd = "minArcStatus -f #{filename} --noserver | jq"
         end
         @@logger.debug(cmd)
         assert(system(cmd), "status of #{filename}")
      }

      @@logger.info("END   => TestCaseMINARC_NAOS::#{__method__.to_s}")
   end

   ## ------------------------------------------------------
   
   def testDecodeArchivedFile
      @@logger.info("START => TestCaseMINARC_NAOS::#{__method__.to_s}")

      system("mkdir -p /tmp/minarc/tmp/")
      
      @@arrInputFiles.each{|filename|
         @@logger.debug("TestCaseMINARC_NAOS::#{__method__.to_s} #{filename}")
         system("echo \'#{filename}\' > /tmp/minarc/tmp/#{filename}")
         cmd = "minArcStore -t NAOS -f \"/tmp/minarc/tmp/#{filename}\" --noserver -D"
         @@logger.debug(cmd)
         assert(system(cmd), "store of #{filename}")

         if filename.include?(".tcl") == true then
            cmd = "minArcStatus -f #{filename.gsub!("_PLA_", "_TCL_")} --noserver | jq"
         else
            cmd = "minArcStatus -f #{filename} --noserver | jq"
         end
         @@logger.debug(cmd)
         assert(system(cmd), "status of #{filename}")
      }

      @@logger.info("END   => TestCaseMINARC_NAOS::#{__method__.to_s}")      
      cmd = "minArcFile -f TRK_NAOS1_TG1_ANG_20221004000000 -T NAOS -e -D" 
   end
  
   ## ------------------------------------------------------


end


# =====================================================================

