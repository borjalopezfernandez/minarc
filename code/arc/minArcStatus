#!/usr/bin/env ruby

# == Synopsis
#
# This is a MINARC command line tool that shows status according to given criteria.
# The output format is given in JSON to eventually support m2m exchanges
# 
# == Usage
# minArcStatus -t <filetype> [-s <start> -e <end>] | -f <filename>
#     --noserver                 operations are performed locally
#     --file <filename>          status of a given filename
#     --type <filetype>          file-type of the file to be deleted
#     --global  
#     --Report <full filename>   Ask for report generation, full path and name of the report to generate.
#     --list                     it lists the files that would be retrieved
#                                according to the selection criteria
#     --help                     shows this help
#     --usage                    shows the usage
#     --Debug                    shows Debug info during the execution
#     --version                  shows version number
#     --Version                  shows version number of the Server
#

require 'getoptlong'
require 'json'

require 'cuc/Log4rLoggerFactory'

require 'arc/MINARC_Status'
require 'arc/FileStatus'
require 'arc/MINARC_Environment'
require 'arc/MINARC_Client'


# MAIN script function
def main

   include ARC

   @filename                  = ""
   @filetype                  = ""
   @dirname                   = ""
   startVal                   = ""
   endVal                     = ""
   @bGlobal                   = false
   @full_report_name          = ""
   bIncStart                  = false
   bIncEnd                    = false
   @isDebugMode               = false
   @bListOnly                 = false
   @bShowVersion              = false
   @bShowVersionServer        = false
   @bNoServer                 = false
   @bShowUsage                = false

   opts = GetoptLong.new(
     ["--file", "-f",            GetoptLong::REQUIRED_ARGUMENT],
     ["--directory", "-d",       GetoptLong::REQUIRED_ARGUMENT],
     ["--type", "-t",            GetoptLong::REQUIRED_ARGUMENT],
     ["--start", "-s",           GetoptLong::REQUIRED_ARGUMENT],
     ["--end",   "-e",           GetoptLong::REQUIRED_ARGUMENT],
     ["--Report", "-R",          GetoptLong::REQUIRED_ARGUMENT],
     ["--noserver", "-n",        GetoptLong::NO_ARGUMENT],
     ["--list", "-l",            GetoptLong::NO_ARGUMENT],
     ["--global", "-g",          GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",           GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",         GetoptLong::NO_ARGUMENT],
     ["--Version", "-V",         GetoptLong::NO_ARGUMENT],
     ["--help", "-h",            GetoptLong::NO_ARGUMENT],
     ["--boundary_start_on",     GetoptLong::NO_ARGUMENT],
     ["--boundary_end_on",       GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt      
            when "--Debug"             then @isDebugMode        = true
            when "--noserver"          then @bNoServer          = true
            when "--list"              then @bListOnly          = true
            when "--global"            then @bGlobal            = true
            when "--version"           then @bShowVersion       = true
            when "--Version"           then @bShowVersionServer = true
            when "--file"              then @filename           = arg.to_s
            when "--directory"         then @dirname            = arg.to_s
                                            deleteDirectory
	         when "--type"              then @filetype           = arg.to_s
            when "--start"             then startVal            = arg.to_s
            when "--end"               then endVal              = arg.to_s
	         when "--Report"            then @full_report_name   = arg.to_s
			   when "--help"              then @bShowUsage         = true
	         when "--usage"             then @bShowUsage         = true
            when "--boundary_start_on" then bIncStart           = true
            when "--boundary_end_on"   then bIncEnd             = true
         end
      end
   rescue Exception
      exit(99)
   end

   if @bShowVersion == true then
      print("\nminArc ", File.basename($0), " Version: [#{ARC::VERSION}]", "\n")
      hRecord = ARC::CHANGE_RECORD
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      exit(0)
   end

   # -------------------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end

   # -------------------------------------------------------

   # Check all flags and combinations

   if @filename == "" and @filetype == "" and @bGlobal == false and @bShowVersionServer == false then
      usage
      exit(66)
   end

   if @filename != "" and @filetype != "" and @bShowVersionServer == false then
      usage
      exit(66)
   end

   # -------------------------------------------------------

   # -------------------------------------------------------

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   ## ------------------------------------------------------

   @minArcConfigDir       = ENV['MINARC_CONFIG']

   ## initialise the logger
   loggerFactory = CUC::Log4rLoggerFactory.new("ArcStatus", "#{@minArcConfigDir}/minarc_log_config.xml")
   
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
      
   @logger = loggerFactory.getLogger
   
   if @logger == nil then
      puts
		puts "Could not initialize logging system !  :-("
      puts "Check minARC logs configuration under \"#{@minArcConfigDir}/minarc_log_config.xml\"" 
		exit(99)
   end

   ## ------------------------------------------------------

   # -------------------------------------------------------

   if !ENV['MINARC_SERVER'] then
      @bNoServer   = true
   end

   # -------------------------------------------------------

   if @bShowVersionServer == true then
      arc = ARC::MINARC_Client.new(@logger)
      if @isDebugMode == true then
         arc.setDebugMode
      end
      version = arc.getVersion
      if version != false then
         puts version
         exit(0)
      else
         puts "Could not connect with minarc server #{ENV['MINARC_SERVER']}"
         exit(99)
      end
   end

   # -------------------------------------------------------

   if @filename != "" then
      fileStatus = ARC::FileStatus.new(@filename, @bNoServer, @logger)

      if @isDebugMode == true then
         fileStatus.setDebugMode
      end
      
      ret = fileStatus.statusFileName(@filename)
     
      if ret == false then
         exit(99)
      else
         puts ret
         exit(0)
      end
   end

   # -------------------------------------------------------
   # status by file-type
   
   if @filetype != "" then
      if @bNoServer == true then
         fileStatus = ARC::FileStatus.new(nil, @bNoServer, @logger)

         if @isDebugMode == true then
            fileStatus.setDebugMode
         end
         ret = fileStatus.statusType(@filetype)
         if @isDebugMode == true then
            puts ret
         end
      else
         arc = ARC::MINARC_Client.new(@logger)
         
         if @isDebugMode == true then
            arc.setDebugMode
         end
         
         ret = arc.statusFileType(@filetype)

         puts ret
         
         exit(0)

      end
   end
   ## ------------------------------------------------------
   ## status global

   if @bGlobal == true then
      ret = Hash.new
      if @bNoServer == true then
         fileStatus = ARC::FileStatus.new(nil, @bNoServer, @logger)
         # fileStatus = ARC::MINARC_Status.new(nil)
         if @isDebugMode == true then
            fileStatus.setDebugMode
         end
         begin
            ret = fileStatus.statusGlobal
         rescue Exception => e
            @logger.error("[ARC_XXX] #{e.to_s.chop}")
            if @isDebugMode == true then
               @logger.debug(e.backtrace)
            end
            exit(66)
         end
      else
         arc = ARC::MINARC_Client.new(@logger)
         
         if @isDebugMode == true then
            arc.setDebugMode
         end
         begin
            ret = arc.statusGlobal
         rescue Exception => e
            @logger.error("[ARC_640] Failed to obtain the minARC status")
            if @isDebugMode == true then
               @logger.debug(e.backtrace)
            end
            exit(66)
         end
      end
      
      puts ret

      exit(0)

   end
   exit(0)
end

## ---------------------------------------------------------

def usage
   fullpathFile = File.expand_path(__FILE__)
      
   value = `#{"head -28 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end

## ---------------------------------------------------------

## =============================================================================
## Start of the main body
main
## End of the main body
## =============================================================================
