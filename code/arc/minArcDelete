#!/usr/bin/env ruby

# == Synopsis
#
# This is a MINARC command line tool that deletes file(s) from the Archive
# according to given criteria. 
# 
# 
# -f flag:
#
# This is a "selection criteria" flag. This option is used to specify the file to be retrieved. 
# Wildcards are allowed. If more than one file matches Rule flag is applied.
# This flag is not compatible with file-type flag "-t" and validity times.
#
#
# -t flag:
#
# This is a "selection criteria flag" is used to specify the file-type of the file to be retrieved.
# This flag is not compatible with the filename selection flag "-f".
#
#
# -s flag:
#
# This flag is used specify the validity start of the file(s) to be retrieved.
# This flag must be specified together "-e" flag. See below "-e" flag specification.
#
#
# -e flag:
#
# This flag is used specify the validity end of the file(s) to be retrieved.
# This flag must be specified together "-s" flag. See above "-s" flag specification.
# 
#
# --boundary_start_on flag:
# This flag is used to specify that time criteria specified overlapping files 
# with validity start sooner than requested are discarded. 
# By default this flag is disabled.
# 
#
# --boundary_end_on flag:
# This flag is used to specify that time criteria specified overlapping files 
# with validity end later than requested are discarded. 
# By default this flag is disabled.
#
#
#
# -R flag:
# 
# Optional flag. It is used to specify that XML Reports should be generated for this execution.
# This flag must be followed by the full path and name of the report to generate.
# -l flag:
#
# This flag is used to list ONLY selected file(s) that would be retrieved.
# No file retrieval is performed. This flag is not compatible with "-d" delete
# flag (see below "-d" flag definition). 
#
#
#
# == Usage
# minArcDelete -t <filetype> [-s <start> -e <end>] | -f <filename>
#     --noserver                 operations are performed locally
#     --file <filename>          it deletes a given filename
#     --type <filetype>          file-type of the file to be deleted
#     --start <YYYYMMDDThhmmss>  
#     --end   <YYYYMMDDThhmmss>
#     --Report <full filename>   Ask for report generation, full path and name of the report to generate.
#     --list                     it lists the files that would be retrieved
#                                according to the selection criteria
#     --help                     shows this help
#     --usage                    shows the usage
#     --Debug                    shows Debug info during the execution
#     --version                  shows version number
#


require 'getoptlong'
require 'rdoc'

require 'cuc/Log4rLoggerFactory'

require 'arc/MINARC_Environment'

# MAIN script function
def main
   include ARC

   @filename                  = ""
   @filetype                  = ""
   @dirname                   = ""
   startVal                   = ""
   endVal                     = ""
   @bNoServer                 = false
   @full_report_name          = ""
   bIncStart                  = false
   bIncEnd                    = false
   @isDebugMode               = false
   @bListOnly                 = false
   @bShowVersion              = false
   @bShowUsage                = false
   
   opts = GetoptLong.new(
     ["--file", "-f",            GetoptLong::REQUIRED_ARGUMENT],
     ["--directory", "-d",       GetoptLong::REQUIRED_ARGUMENT],
     ["--type", "-t",            GetoptLong::REQUIRED_ARGUMENT],
     ["--start", "-s",           GetoptLong::REQUIRED_ARGUMENT],
     ["--end",   "-e",           GetoptLong::REQUIRED_ARGUMENT],
     ["--Report", "-R",          GetoptLong::REQUIRED_ARGUMENT],
     ["--noserver", "-n",        GetoptLong::NO_ARGUMENT],
     ["--list", "-l",            GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",           GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",         GetoptLong::NO_ARGUMENT],
     ["--help", "-h",            GetoptLong::NO_ARGUMENT],
     ["--boundary_start_on",     GetoptLong::NO_ARGUMENT],
     ["--boundary_end_on",       GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt      
            when "--noserver"          then @bNoServer            = true
            when "--list"              then @bListOnly            = true
            when "--version"           then @bShowVersion         = true
            when "--Debug"             then @isDebugMode          = true
            when "--file"              then @filename             = arg.to_s
            when "--directory"         then @dirname              = arg.to_s
                                            deleteDirectory
	         when "--type"              then @filetype             = arg.to_s
            when "--start"             then startVal              = arg.to_s
            when "--end"               then endVal                = arg.to_s
	         when "--Report"            then @full_report_name     = arg.to_s
			   when "--help"              then @bShowUsage           = true
	         when "--usage"             then @bShowUsage           = true
            when "--boundary_start_on" then bIncStart             = true
            when "--boundary_end_on"   then bIncEnd               = true
         end
      end
   rescue Exception
      exit(99)
   end

   # -------------------------------------------------------

   if @bShowVersion == true then
      print("\nminARC ", File.basename($0), " Version: [#{ARC::VERSION}]", "\n")
      hRecord = ARC::CHANGE_RECORD
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      exit(0)
   end

   # -------------------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end
 
   # -------------------------------------------------------

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   # -------------------------------------------------------

   ## ------------------------------------------------------

   @minArcConfigDir       = ENV['MINARC_CONFIG']

   ## initialise the logger
   loggerFactory = CUC::Log4rLoggerFactory.new("minArcDel", "#{@minArcConfigDir}/minarc_log_config.xml")
   
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
      
   @logger = loggerFactory.getLogger
   
   if @logger == nil then
      puts
		puts "Could not initialize logging system !  :-("
      puts "Check minARC logs configuration under \"#{@minArcConfigDir}/minarc_log_config.xml\"" 
		exit(99)
   end

   ## ------------------------------------------------------
 
   # -------------------------------------------------------

   if @isDebugMode == true and @bNoServer == true then
      @logger.debug("MINARC Local Mode")
   end

   # -------------------------------------------------------
   
   if !ENV['MINARC_SERVER'] then
      @bNoServer   = true
   end

 
   # Check all flags and combinations

   if (startVal != "" and endVal == "") or  (endVal == "" and endVal != "") then
      puts
      puts "Single-bounded intervals are not allowed..."
      puts
      usage
      exit(99)
   end

   if @filename == "" and @filetype == "" then
      usage
      exit(66)
   end

   if @filename != "" and @filetype != "" then
      usage
      exit(66)
   end

   require 'arc/FileDeleter'

   begin
      if startVal != "" and endVal != "" then
         startVal = DateTime.parse(startVal)
         endVal   = DateTime.parse(endVal)
      end
   rescue Exception
      puts
      puts "Error on date provided. See date format below."
      usage
   end

   if startVal != "" then
      if startVal > endVal then
         puts
         puts "Requested Start Time cannot be later than End Time ! :-p"
         puts
         exit(99)
      end
   end


   fileDeleter = ARC::FileDeleter.new(@bListOnly, @bNoServer, @logger)

   if @isDebugMode == true then
      fileDeleter.setDebugMode
   end

   if @full_report_name != "" then
      if @full_report_name.index('/') == nil or @full_report_name.index('/') != 0 then
         puts
         puts "Please specify a full path and name for the report file !"
         puts
         exit(99)   
      else
         fileDeleter.enableReporting(@full_report_name)
      end
   end

   ret = false

   if @filetype != "" then
      ret = fileDeleter.delete_by_type(@filetype, startVal, endVal, bIncStart, bIncEnd)
   else
      ret = fileDeleter.delete_by_name(@filename)
      
      if ret == false then
         if @bNoServer == false then
            @logger.error("[ARC_620] #{File.basename(@filename, ".*").gsub("%2A", "*")} could not be deleted")
         else
            @logger.error("[ARC_620] #{File.basename(@filename, ".*").gsub("%", "*")} could not be deleted")
         end
      else
         @logger.info("[ARC_105] Deleted : #{File.basename(@filename)}")
      end
      
   end
   
   if ret == true then
      exit(0)
   else
      exit(1)
   end

end

## -------------------------------------------------------------

def deleteDirectory
   pwd = Dir.pwd
   
   Dir.chdir(@dirname)
   
   arr = Dir['*']

   arr.each{|element|
   
      if File.directory?(element) == true then
         puts "skipping directory #{element}"
         next
      end

      cmd = "minArcDelete2.rb -f #{element}"
      puts cmd
      system(cmd)
   }
   
   Dir.chdir(pwd)
   
   exit(0)
end
## -------------------------------------------------------------

def usage
   fullpathFile = File.expand_path(__FILE__)
      
   value = `#{"head -72 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end

## -------------------------------------------------------------


## =============================================================================
## Start of the main body
main
## End of the main body
## =============================================================================
