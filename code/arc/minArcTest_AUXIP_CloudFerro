#!/usr/bin/env ruby

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'ctc/WrapperCURL'
require 'ctc/API_MINARC_OData'

require 'arc/MINARC_Environment'
require 'arc/MINARC_Status'
require 'arc/ReadMinarcConfig'

      
### rake -f build_minarc.rake minarc:install[s2decservice,cloudferro,s2_test]

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed

## 1  - test_odata_download
## 2  - test_odata_query_name
## 3  - test_odata_query_date
## 4  - test_odata_query_validity_date
## 5  - test_odata_query_count
## 6  - test_odata_query_count_name
## 7  - test_odata_query_skip
## 8  - test_odata_query_top
## 9  - test_odata_query_expand (NOT IMPLEMENTED)
## 10 - test_odata_error_handling

class TestCaseStore < Test::Unit::TestCase

   include CTC::WrapperCURL

   include CUC::DirUtils
   include ARC
   include ARC_ODATA

   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   # --------------------------------------------------------
   
   Test::Unit.at_start do      
      
      system("clear")
      
      puts
      puts "======================================"
      puts "MINARC OData Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      if c != 'Y' then
         exit(99)
      end      
                       
      @@arcConfigDir = File.join(File.dirname(File.expand_path(__FILE__)), "../../config")
      puts
      puts @@arcConfigDir
      puts                   
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("ARCTEST", "#{@@arcConfigDir}/minarc_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in OrchestratorIngester::initialize"
     	   puts "Could not initialize logging system !  :-("
         puts "Check minARC logs configuration under \"#{@@arcConfigDir}/minarc_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

            
   end
   
   # --------------------------------------------------------
   
   Test::Unit.at_exit do
#       puts "End of tests"
#             
#       puts "Killing MINARC_Server"
#       cmd = "minArcServer -k"
#       system(cmd)
#       
#       Process.kill(9, @serverPID)
            
   end
   
   # --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
#      puts
#      puts "================================================"
#      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
#      puts
      
      system("\\rm -rf /tmp/minarc_log_file*.log")
      
#      puts
#      puts "END OF SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
#      puts
   end
   ## --------------------------------------------------------
   ## After every test case

   def teardown
#      puts
#      puts "================================================"
#      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
#      puts
#      
#      puts
#      puts "END OF SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
#      puts
   end
   ## ------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_download
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
   
      prevDir  = Dir.pwd   
      config   = ReadMinarcConfig.instance   
      server   = config.getArchiveServer

      url      = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      ## well-formed query request / good request to get the id
      puts "QUERY ID / UUID"
      cmd = "curl -k -s -u test:test '#{url}$filter=startswith(Name,'S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031')' | jq .value[0].Id"
      puts
      puts cmd
      uuid = `#{cmd}` 
      uuid = uuid.dup.chop.gsub!('"', '')
      puts uuid
      puts
      puts "-------------------------"  
      assert($? == 0, "successful curl query")
          
      ## -------------------------------

      url = "#{server}/odata/v1/Products"

      ## -------------------------------
      ## well-formed download request with uuid of previous request
      puts "HEAD ID / UUID"
      cmd = "curl -k --head -u test:test \'#{url}(#{uuid})/\$value\' "
      puts cmd
      ret = system(cmd)
      assert(ret, "head successful")
      puts "-------------------------"  
      ## -------------------------------

      ## -------------------------------
      ## well-formed download request with uuid of previous request
      puts "GET ID / UUID"
      cmd = "curl -k -s -u test:test \'#{url}(#{uuid})/\$value\' > S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031.7z"
      puts cmd
      ret = system(cmd)
      assert(ret, "download successful")
      assert(File.exist?("S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031.7z"), "download successful")      
      if File.exist?("S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031.7z") == true
         File.delete("S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031.7z")
      end
      puts "-------------------------"  

      ## -------------------------------

      ## well-formed download request with uuid of previous request
      theURL = "#{url}(#{uuid})/\$value"
      ret = getFile(theURL, false, "test", "test", "", false)
      
      assert(ret, "File download with WrapperCURL.getFile")
      assert(File.exist?("S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031.7z"), "download successful")      
      if File.exist?("S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031.7z") == true
         File.delete("S2A_OPER_REP_OPDPC__VGS2_20210226T064236_V20210226T062825_20210226T063031.7z")
      end
      puts "-------------------------"  
      ## -------------------------------
   
      Dir.chdir(prevDir)
   
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_name
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
      
      config   = ReadMinarcConfig.instance   
      server   = config.getArchiveServer
      url      = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------

## S2__OPER_REP_ARC____EPA__20210318T194417_V20210316T155015_20210316T160249

      ## -------------------------------
      ## well-formed query request
      puts "QUERY startswith(Name,'S2__OPER_REP_ARC____EPA__20210318T194417_V20210316T155015_20210316T160249')"
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=startswith(Name,'S2__OPER_REP_ARC____EPA__20210318T194417_V20210316T155015_20210316T160249')' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"  
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request
      puts "QUERY startswith(Name,'S2A_OPER_REP_OPDPC__VGS4_20210303')"
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=startswith(Name,'S2A_OPER_REP_OPDPC__VGS4_20210303')' | jq '.count, .value[].Name'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"  
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request
      puts "QUERY startswith(Name,'S2A_OPER_MPL__NPPF_')"
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$filter=startswith(Name,'S2A_OPER_MPL__NPPF_')' | jq '.count, .value[].Name'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"      
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request
      puts "QUERY startswith(Name,'S2B_OPER_MPL__NPPF_')"
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$filter=startswith(Name,'S2B_OPER_MPL__NPPF_')' | jq '.count, .value[].Name'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"     
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / good request with results
      puts "QUERY endswith(Name,'V20210226T062825_20210226T063031')"
      cmd = "curl -s -k -u test:test \'#{url}$filter=endswith(Name,'V20210226T062825_20210226T063031')\&$count=true' | jq '.count, .value[].Name' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"          
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / good request
      puts "QUERY contains(Name,'V20210226T062825')"
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=contains(Name,'V20210226T062825')' | jq '.count, .value[].Name' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"     
      ## -------------------------------
  
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_date
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
      puts 
        
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      url    = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate lt 2021-01-21T12:50:30.000Z
      puts "QUERY PublicationDate lt 2021-01-21T12:50:03.600Z"
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20lt%202021-01-21T12:50:03.600Z\&$count=true' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate le 2020-05-15T00:00:00.000Z
      puts "QUERY PublicationDate le 2021-01-21T12:50:03.600Z"
      cmd = "curl -s -k -u test:test \'#{url}$filter=$count=true\&PublicationDate%20le%202021-01-21T12:50:03.600Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      puts "QUERY PublicationDate gt 2021-03-03T12:00:00.000Z"      
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=PublicationDate%20gt%202021-03-03T12:00:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate ge 2020-05-15T00:00:00.000Z
      puts "QUERY PublicationDate ge 2021-03-03T12:00:00.000Z"            
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=PublicationDate%20ge%202021-03-03T12:00:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

  
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_validity_date
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
              
      cmd      = ""
      config   = ReadMinarcConfig.instance   
      server   = config.getArchiveServer
      url      = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2021-03-03T00:00:00.000Z
      puts "QUERY ContentDate/Start gt 2021-03-03T00:00:00.000Z"              
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=ContentDate/Start%20gt%202021-03-03T00:00:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/End le 2020-01-15T00:00:00.000Z
      puts "QUERY ContentDate/End le 2020-01-15T00:00:00.000Z"       
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=ContentDate/End%20le%202020-01-15T00:00:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with start > end which should never return results
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2119-05-15T00:00:00.000Z and ContentDate/End lt 2119-05-16T00:00:00.000Z

      puts "QUERY ContentDate/Start gt 2119-05-15T00:00:00.000Z and ContentDate/End lt 2009-05-16T00:00:00.000Z"         
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=ContentDate/Start%20gt%202119-05-15T00:00:00.000Z%20and%20ContentDate/End%20lt%202009-05-16T00:00:00.000Z' | jq '.value[].Name, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T01:00:00.000Z

      puts "QUERY ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T00:10:00.000Z"         
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=ContentDate/Start%20gt%202021-03-01T00:00:00.000Z%20and%20ContentDate/End%20lt%202021-03-01T00:10:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T01:00:00.000Z

      puts "QUERY $skip=10 ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T00:10:00.000Z"  
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$skip=10\&$filter=ContentDate/Start%20gt%202021-03-01T00:00:00.000Z%20and%20ContentDate/End%20lt%202021-03-01T00:10:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T01:00:00.000Z

      puts "QUERY $top=5 ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T00:10:00.000Z"        
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$top=5\&$filter=ContentDate/Start%20gt%202021-03-01T00:00:00.000Z%20and%20ContentDate/End%20lt%202021-03-01T00:10:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T01:00:00.000Z

      puts "QUERY $skip=10 $top=5 ContentDate/Start gt 2021-03-01T00:00:00.000Z and ContentDate/End lt 2021-03-01T00:10:00.000Z"
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$skip=10\&$top=5\&$filter=ContentDate/Start%20gt%202021-03-01T00:00:00.000Z%20and%20ContentDate/End%20lt%202021-03-01T00:10:00.000Z' | jq '.value[].Name, .value[].PublicationDate, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------


   end
   ## -----------------------------------------------------------
   ## -----------------------------------------------------------
   ##
   ## https://<service-root-uri>/odata/v1/Products?$count=true

   def test_odata_query_count
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
                   
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer      
      url    = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$count=true
      puts "QUERY $count=true"
      cmd = "curl -k -s -u test:test \'#{url}Products?$count=true' | jq .count"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------" 
      ## -------------------------------


   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------
   ##
   ## /odata/v1/Products$count=true&$filter=startswith(Name,'S2A')

   def test_odata_query_count_name
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      ## well-formed query request request with negative results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S1B')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S1B')' | jq .count"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------" 
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2B')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S2B')' | jq '.value[].Name, .count' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------" 
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2A')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S2A')' | jq '.value[].Name, .count' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------" 
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S2')' | jq '.value[].Name, .count' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------" 
      ## -------------------------------

   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_skip
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
      
        
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"

      ## -------------------------------
      ## well-formed query date request request / skip 1 item
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$skip=1\&$filter=PublicationDate%20gt%202021-02-15T00:00:00.000Z' | jq .count"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query date request request / skip 1 item
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$filter=PublicationDate%20ge%202021-02-15T00:00:00.000Z\&$skip=1' | jq .count"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request 
      cmd = "curl -k -s -u test:test \'#{url}$filter=startswith(Name,'S2B')\&$skip=50000\&$count=true' | jq '.value[].Name, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------
   
      ## -------------------------------
      ## well-formed query request
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$top=2$skip=10000\&$filter=startswith(Name,'S2A')' | jq '.value[].Name, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request 
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$top=1$skip=10001\&$filter=startswith(Name,'S2A')' | jq '.value[].Name, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request /
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$top=2$skip=50000\&$filter=startswith(Name,'S2A')' | jq '.value[].Name, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request /
      cmd = "curl -k -s -u test:test \'#{url}$count=true\&$top=1$skip=50001\&$filter=startswith(Name,'S2A')' | jq '.value[].Name, .count'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------
  
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_top
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
      
        
      cmd    = ""
      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      url    = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   

      ## -------------------------------
      ## well-formed query request / top 100 item
      puts "QUERY $top=100 startswith(Name,'S2')"
      cmd = "curl -k -s -u test:test \'#{url}$filter=startswith(Name,'S2')\&$top=100' | jq '.value[].Name' | wc -l"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request changing order / top 1 items
      puts "QUERY $top=1 $skip=400000 startswith(Name,'S2')"
      cmd = "curl -k -s -u test:test \'#{url}$top=1\&$skip=400000\&$filter=startswith(Name,'S2')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request / top 200 item
      puts "QUERY $top=200 startswith(Name,'S2')"
      cmd = "curl -k -s -u test:test \'#{url}$filter=startswith(Name,'S2')\&$top=200' | jq '.value[].Name' | wc -l"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / top 9999 item
      puts "QUERY $top=99999 startswith(Name,'S2')"
      cmd = "curl -k -s -u test:test \'#{url}$filter=startswith(Name,'S2')\&$top=99999' | jq '.value[].Name' | wc -l"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"
      ## -------------------------------

      ## -------------------------------

  
   end
   ## -----------------------------------------------------------

#   ## -----------------------------------------------------------
#
#   def test_odata_query_expand
#      puts
#      puts "================================================"
#      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
#      puts
#              
#      cmd = ""
#
#      config = ReadMinarcConfig.instance   
#      server = config.getArchiveServer
#      
#      
#      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
#   
#
#      ## -------------------------------
#      ## well-formed query request but not recognized entity
#      cmd = "curl -k -v -u test:test \'#{url}$expand=Donald' | jq"
#      puts cmd
#      ret = system(cmd)      
#      assert(ret, "successful curl query")
#      
#      ## -------------------------------
#
#      ## -------------------------------
#      ## well-formed query request 
#      cmd = "curl -k -s -u test:test \'#{url}$expand=Attributes' | jq"
#      puts cmd
#      ret = system(cmd)      
#      assert(ret, "successful curl query")
#      
#      ## -------------------------------
#
#
#      ## -------------------------------
#
#  
#   end
#   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_error_handling
      puts
      puts "================================================"
      puts "SmokeTest_AUXIP_CloudFerro::#{__method__.to_s}"
      puts
      
        
      cmd    = ""
      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      url    = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   

      ## -------------------------------
      ## well-formed query request / bad function request
      cmd = "curl -k -v -u test:test \'#{url}$filter=notsupportedfunction(Name,'S2')' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / good request with no results
      cmd = "curl -k -v -u test:test \'#{url}count=true\&$filter=endswith(Name,'S2')' | jq .count"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      puts "-------------------------"      
      ## -------------------------------


      ## -------------------------------

  
   end
   ## -----------------------------------------------------------



end


# =====================================================================

