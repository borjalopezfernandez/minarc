#!/usr/bin/env ruby

# == Synopsis
#
# This is a MINARC server
#
# == Usage
# minArcServer --start | --kill | --check  [--devel]
#     --start                    it starts the server
#     --kill                     it kills the server
#     --check                    it checks the server execution status
#     --devel                    it loads the development preconfiguration
#     --help                     shows this help
#     --usage                    shows the usage
#     --Debug                    shows Debug info during the execution
#     --version                  shows version number
#
#

require 'getoptlong'
require 'rdoc'

require 'cuc/Log4rLoggerFactory'
require 'cuc/CheckerProcessUniqueness'

require 'arc/MINARC_Environment'

# require 'arc/MINARC_Server' (cf. require below)


# MAIN script function
def main

   include ARC

   @isDebugMode            = false
   showVersion             = false
   @bCheckStatus           = false
   @bStartServer           = false
   @bStopServer            = false
   @bShowVersion           = false
   @bDevelopment           = false
   @bShowUsage             = false
   @bHappy                 = false

   opts = GetoptLong.new(
     ["--file", "-f",            GetoptLong::REQUIRED_ARGUMENT],
     ["--type", "-t",            GetoptLong::REQUIRED_ARGUMENT],
     ["--start", "-s",           GetoptLong::NO_ARGUMENT],
     ["--kill",   "-k",          GetoptLong::NO_ARGUMENT],
     ["--check", "-c",           GetoptLong::NO_ARGUMENT],
     ["--list", "-l",            GetoptLong::NO_ARGUMENT],
     ["--devel", "-d",           GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",           GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",         GetoptLong::NO_ARGUMENT],
     ["--Happy",   "-H",         GetoptLong::NO_ARGUMENT],
     ["--help", "-h",            GetoptLong::NO_ARGUMENT]
     )

   begin
      opts.each do |opt, arg|
         case opt
            when "--Debug"             then @isDebugMode          = true
            when "--devel"             then @bDevelopment         = true
            when "--version"           then @bShowVersion         = true
            when "--start"             then @bStartServer         = true
            when "--kill"              then @bStopServer          = true
	         when "--check"             then @bCheckStatus         = true
			   when "--help"              then @bShowUsage           = true
            when "--Happy"             then @bHappy               = true
	         when "--usage"             then @bShowUsage           = true
         end
      end
   rescue Exception
      exit(99)
   end

   if @bShowVersion == true then
      print("\nminArc ", File.basename($0), " Version: [#{ARC::VERSION}]", "\n")
      hRecord = ARC::CHANGE_RECORD
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      exit(0)
   end

   # -------------------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end

   # -------------------------------------------------------


   if !@bCheckStatus and !@bStartServer and !@bStopServer
      usage
      exit(99)
   end

   # -------------------------------------------------------

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   # -------------------------------------------------------

   if @isDebugMode == false then
      ENV.delete('MINARC_DEBUG')
   else
      ENV['MINARC_DEBUG'] = "true"
   end

   ## ------------------------------------------------------

   @minArcConfigDir       = ENV['MINARC_CONFIG']

   ## initialise the logger
   loggerFactory = CUC::Log4rLoggerFactory.new("minArcServer", "#{@minArcConfigDir}/minarc_log_config.xml")

   if @isDebugMode then
      loggerFactory.setDebugMode
   end

   @logger = loggerFactory.getLogger

   if @logger == nil then
      puts
		puts "Could not initialize logging system !  :-("
      puts "Check minARC logs configuration under \"#{@minArcConfigDir}/minarc_log_config.xml\""
		exit(99)
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   if @bCheckStatus == true then
      checkStatus
   end

   if @bStopServer == true then
      stopServer
   end

   if @bStartServer == true then
      startServer
   end

   exit(0)

   # -------------------------------------------------------

end

## -------------------------------------------------------------

## It checks whether the server is running or not
## It returns:
## * 0 -> server is running
## * 1 -> server is not running
##
def checkStatus
   checker = CUC::CheckerProcessUniqueness.new(File.basename($0), "SET_MINARC_PLUGIN_NAME", true, ENV['MINARC_TMP'])
   if @isDebugMode == true then
      checker.setDebugMode
   end
   ret     = checker.isRunning
   if ret == false then
      @logger.info("[ARC_031] No daemon is running for minArcServer")
      exit(0)
   else
      @logger.info("[ARC_032] minArcServer is running with PID #{checker.getRunningPID}")
      exit(0)
   end
end
## -------------------------------------------------------------

def startServer
   @locker = CUC::CheckerProcessUniqueness.new(File.basename($0), "SET_MINARC_PLUGIN_NAME", true, ENV['MINARC_TMP'])
   if @locker.isRunning == true then
      @logger.warn("[ARC_310] minArcServer is already running with PID #{@locker.getRunningPID}")
      if @bHappy == true then
         @logger.info("[ARC_XXX] minArcServer is still happy")
         exit(0)
      else
         @logger.info("[ARC_XXX] minArcServer is not happy")
         exit(99)
      end
   end

   @logger.info("[ARC_005] Starting minArcServer")

   @locker.setRunning


   require 'arc/MINARC_Server'


   MINARC_Server.set :isDebugMode, @isDebugMode

   begin
      MINARC_Server.run!
      #run MINARC_Server
   rescue Exception => e
      if @isDebugMode == true then
         puts e.backtrace
      end
      @logger.error("[ARC_666] Cannot start server: #{e.to_s}")
   end
   exit(0)

end
## -------------------------------------------------------------

## --------------------------------------------------------------

## It stops the server for the given I/F
def stopServer
   checker = CUC::CheckerProcessUniqueness.new(File.basename($0), "SET_MINARC_PLUGIN_NAME", true, ENV['MINARC_TMP'])
   pid = checker.isRunning
   if pid == false then
      @logger.warn("[ARC_312] minArcServer was not running")
   else
      pid     = checker.getRunningPID
      if @isDebugMode == true then
         @logger.debug("Sending signal SIGKILL to Process #{pid} for killing minArcServer")
      end
      begin
         Process.kill(9, pid.to_i)
      rescue Exception => e
         @logger.warn(e.to_s)
      end
	   checker.release
      @logger.info("[ARC_060] minArcServer has been shut-down")
   end
end
## --------------------------------------------------------------


# -------------------------------------------------------------

def usage
   fullpathFile = File.expand_path(__FILE__)

   value = `#{"head -17 #{fullpathFile}"}`

   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end

# -------------------------------------------------------------

## ===============================================================================
## Start of the main body
main
## End of the main body
## ===============================================================================
