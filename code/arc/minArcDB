#!/usr/bin/env ruby

#
# == Usage
# minArcDB --create-tables | --drop-tables [-H]
#     --create-tables   create all minarc required tables
#     --drop-tables     drops all minarc tables
#     --Update-tables   performs a migration update of minarc tables
#     --Happy           it ensures a happy ending despite eventual errors
#     --add-user        <user:pass>
#     --export-rows     it exports all rows
#     --Debug           shows Debug info during the execution
#     --help            shows this help
# 
#


require 'rubygems'
require 'active_record'
require 'getoptlong'

require 'cuc/Log4rLoggerFactory'

require 'arc/MINARC_Environment'


# MAIN script function
def main
   include ARC

   @bUp           = false
   @bDown         = false
   @bUpdate       = false
   @bExport       = false
   @bShowVersion  = false
   @bShowUsage    = false
   @bIsDebugMode  = false
   @bHappy        = false
   @user          = false
   @name          = nil
   @pass          = nil
   
   opts = GetoptLong.new(
     ["--drop-tables",     "-d",       GetoptLong::NO_ARGUMENT],
     ["--create-tables",   "-c",       GetoptLong::NO_ARGUMENT],
     ["--Update-tables",   "-U",       GetoptLong::NO_ARGUMENT],
     ["--Happy",   "-H",               GetoptLong::NO_ARGUMENT],
     ["--export-rows",     "-e",       GetoptLong::NO_ARGUMENT],
     ["--version", "-v",               GetoptLong::NO_ARGUMENT],
     ["--usage",   "-u",               GetoptLong::NO_ARGUMENT],
     ["--Debug",   "-D",               GetoptLong::NO_ARGUMENT],
     ["--add-user", "-a",              GetoptLong::REQUIRED_ARGUMENT],
     ["--help",            "-h",       GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt      
            when "--create-tables"     then @bUp                  = true
            when "--drop-tables"       then @bDown                = true
            when "--Update-tables"     then @bUpdate              = true
            when "--export-rows"       then @bExport              = true
            when "--usage"             then @bShowUsage           = true
			   when "--help"              then @bShowUsage           = true
            when "--Happy"             then @bHappy               = true
            when "--Debug"             then @bIsDebugMode         = true
            when "--version"           then @bShowVersion         = true
            when "--add-user"          then @user                 = arg.to_s
         end
      end
   rescue Exception => e
      # puts e.to_s
      exit(99)
   end

   # -------------------------------------------------------

   if @bShowVersion == true then
      print("\nminArc ", File.basename($0), " Version: [#{ARC::VERSION}]", "\n")
      hRecord = ARC::CHANGE_RECORD
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      exit(0)
   end

   # -------------------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end

   # -------------------------------------------------------

   if @bDown and @bUp then
      usage
      exit(0)
   end

   if !@bDown and !@bUp and !@bUpdate and !@bExport and !@user then 
      usage
      exit(66)
   end

   # -------------------------------------------------------

   begin
      if self.checkEnvironmentEssential == false then
         puts
         self.printEnvironmentError
         puts
         exit(99)
      end
   rescue Exception => e
      puts("Fatal Error: #{e.to_s} #{'1F480'.hex.chr('UTF-8')}")
      exit(99)
   end

   # -------------------------------------------------------

   @minArcConfigDir       = ENV['MINARC_CONFIG']

   ## initialise the logger
   loggerFactory = CUC::Log4rLoggerFactory.new("minArcDB ", "#{@minArcConfigDir}/minarc_log_config.xml")
   
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
      
   @logger = loggerFactory.getLogger
   
   if @logger == nil then
      puts
		puts "Could not initialize logging system !  :-("
      puts "Check minARC logs configuration under \"#{@minArcConfigDir}/minarc_log_config.xml\"" 
		exit(99)
   end

   ## ------------------------------------------------------
   
   if @bIsDebugMode == true then
      self.log_environment(@logger)
   end
   # -------------------------------------------------------

   if ENV["MINARC_ARCHIVE_ROOT"] == nil or ENV["MINARC_ARCHIVE_ROOT"] == "" then
      @logger.error("#{__FILE__} requires local mode configuration / environment unready :-(")
      exit(99)
   end

   require 'arc/MINARC_Migrations'
   require 'arc/MINARC_DatabaseModel'

   if @bDown then
      begin
         CreateArchivedFiles.down
         CreateUsers.down
         if File.exist?(@dbName) == true then
            File.delete(@dbName)
         end
         CreateServedFiles.down
         @logger.info("[ARC_000] Removed minARC tables")
         return
      rescue Exception => e
         if @bIsDebugMode == true then
            @logger.debug(e.backtrace)
         end
         @logger.error(e.to_s)

         if @bHappy == true then
            exit(0)
         else
            exit(99)
         end
      end
   end

   if @bUp then
      begin
         CreateArchivedFiles.up
         CreateUsers.up
         CreateServedFiles.up
         @logger.info("[ARC_000] Created minARC tables")
      rescue Exception => e
         if @bIsDebugMode == true then
            @logger.debug(e.backtrace)
         end
         @logger.error(e.to_s)

         if @bHappy == true then
            exit(0)
         else
            exit(99)
         end
      end
      exit(0)
   end
 
   ## --------------------------------------------------------------------------
 
   if @bUpdate then
      
      if ActiveRecord::Base.connection.index_exists?(:archived_files, :filename) == false
         migration2 = AddIndexFilename.new
         migration2.change
      else
         @logger.warn("Index on filename already exists :-)")
      end

      if ActiveRecord::Base.connection.index_exists?(:archived_files, :name) == false
         # migration3 = AddNewColumns.new
         # migration3.change_20181216
         migration3 = AddIndexName.new
         migration3.change
      else
         @logger.warn("Index on name already exists :-)")
      end
            
#      if ArchivedFile.columns_hash["size_in_disk"].type == :integer then
#         puts "Updating columns type to bigint: size, size_original, size_in_disk, access_counter"
#         migration4 = ModifySizeColumns.new
#         migration4.change
#      end
 
      if ArchivedFile.columns_hash["uuid"] == nil or \
         ArchivedFile.columns_hash["md5"] == nil then
         @logger.info("Updating table archived_files to meet version 1.1")
         migration5 = Add_version_1_1.new
         migration5.change
         @logger.info(ArchivedFile.columns_hash["uuid"])
         @logger.info(ArchivedFile.columns_hash["md5"])
      else
         @logger.warn("uuid, md5 columns already exists :-)")
      end

      if ArchivedFile.columns_hash["filename_original"] == nil then
         @logger.warn("Updating table archived_files to meet version 1.2")
         migration6 = Add_version_1_2.new
         migration6.change
         @logger.info(ArchivedFile.columns_hash["filename_original"])
      else
         @logger.warn("filename_original exists :-)")
      end
     
      exit(0)
      
   end 
 
   ## --------------------------------------------------------------------------
 
   if @bExport then
      Export2CSV.new
   end
 
   ## ----------------------------------------------------------------
   
   if @user != false then
      @name = @user.split(":")[0]
      @pass = @user.split(":")[1]
      
      if @bIsDebugMode == true then
         @logger.debug("Creating user #{@name} : #{@pass}")
      end
      
      now   = Time.now
      user  = User.new(name: @name, password: @pass, created_at: now)
      user.save
      @logger.info("[ARC_001] Created user #{@name} : #{@pass}")
   end
   
   ## ----------------------------------------------------------------
   
   exit(0)

end

## ---------------------------------------------------------

## ---------------------------------------------------------

def usage
   fullpathFile = File.expand_path(__FILE__)
   value        = `#{"head -15 #{fullpathFile}"}`
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end

## ---------------------------------------------------------


## ===================================================================
## Start of the main body
main
## End of the main body
## ===================================================================
