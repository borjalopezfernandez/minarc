#!/usr/bin/env ruby

#########################################################################
###
### === Ruby source for #MINARC_TestCasesOData class
###
### === Written by DEIMOS Space S.L. (bolf)
###
### === Mini Archive Component (MinArc)
### 
### module MINARC
###
#########################################################################


require 'rubygems'
require 'test/unit'

require 'fileutils'




require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'ctc/WrapperCURL'

require 'ctc/API_MINARC_OData'

require 'arc/MINARC_Environment'
require 'arc/MINARC_Client'
require 'arc/MINARC_Status'
require 'arc/ReadMinarcConfig'
      
### rake -f build_minarc.rake minarc:install[borja,localhost,s2_test_pg]

### decODataClient is required
## rake -f build_dec.rake dec:install

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed

##  1  - test_odata_download
##  2  - test_odata_query_name
##  3  - test_odata_query_orderby
##  4  - test_odata_query_date
##  5  - test_odata_query_validity_date
##  6  - test_odata_query_count
##  7  - test_odata_query_count_name
##  8  - test_odata_query_skip
##  9  - test_odata_query_top
## 10  - test_odata_query_expand
## 11  - test_odata_bad_queries
## 12  - test_command_delay / requires DEC update
## 12  - test_command_download / requires DEC update
## 13  - test_command_auth_failure / requires DEC update

class TestCaseStore < Test::Unit::TestCase

   include CTC::WrapperCURL

   include CUC::DirUtils
   include ARC
   include ARC_ODATA

   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   # --------------------------------------------------------
   
   Test::Unit.at_start do      
      
      system("clear")
      
      puts
      puts "======================================"
      puts "MINARC OData Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      if c != 'Y' then
         exit(99)
      end
      
      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config


      puts      
      @@conf.wrapper_print_environment
      puts
 
      ## Mixin does not work !!!!!
      ## checkDirectory(ENV["MINARC_ARCHIVE_ROOT"])
      system("mkdir -p /tmp/minarc/archive_root")
      system("mkdir -p /tmp/minarc/tmp")
 
      if @@conf.wrapper_check_environment == false then
         puts "minArc environment not suited for unit tests"
         puts
         exit(99)
      end

      config               = ReadMinarcConfig.instance
      @@server             = config.getArchiveServer

      puts "minARC Server => #{@@server}"

      @@testDataDir        = File.join( File.dirname(File.expand_path(__FILE__)), "plugins/test" )
      @@testFile1          = "S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      @@testFile2          = "S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      @@filename1_noext    = "S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001"
      @@filename2_noext    = "S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001"
      @@errorZone          = ENV['MINARC_ARCHIVE_ERROR']

      system("rm -f #{@@testDataDir}/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z")
      system("rm -f #{@@testDataDir}/20110204T193316_000001.m2ts")

      @@prevDir = Dir.pwd     
      Dir.chdir(@@testDataDir)
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      system("echo \'S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      Dir.chdir(@@prevDir)                       
                       
      @@arcConfigDir = File.join(File.dirname(File.expand_path(__FILE__)), "../../config")
      puts
      puts @@arcConfigDir
      puts                   

      Dir.chdir(@@testDataDir)
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      system("\\rm -f #{@@testDataDir}/#{@@filename1_noext}.7z")
      
      Dir.chdir(@@prevDir)    

      cmd = "minArcDB -d"
      puts cmd
      system(cmd)

      cmd = "minArcDB -c"
      puts cmd
      system(cmd)
 
      cmd = "minArcDB -a test:test -D"
      puts cmd
      system(cmd)

      cmd = "minArcDB -a dec:dec -D"
      puts cmd
      system(cmd)

      cmd = "minArcServer -k"
      puts cmd
      system(cmd)

      puts

      # cmd = "minArcServer -s -D"
      cmd = "minArcServer -s"
      puts cmd
      spawn(cmd)
 
      sleep(5.0)
      
      cmd = "minArcServer -c"
      puts cmd
      system(cmd)
      puts

      system("mkdir -p /tmp/minarc/tmp/")
      
      cmd = "cp #{@@testDataDir}/#{@@testFile1} /tmp/minarc/tmp/"
      puts cmd
      system(cmd)

      cmd = "cp #{@@testDataDir}/#{@@testFile2} /tmp/minarc/tmp/"
      puts cmd
      system(cmd)
      
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile1} --noserver -d -D"
      puts cmd
      system(cmd)
 
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile2} --noserver -d -D"
      puts cmd
      system(cmd)
     
      system("\\rm -f /tmp/minarc/tmp/#{@@filename1_noext}.7z")
      system("\\rm -f /tmp/minarc/tmp/#{@@filename2_noext}.7z")

            
   end
   
   # --------------------------------------------------------
   
   Test::Unit.at_exit do
#       puts "End of tests"
#             
#       puts "Killing MINARC_Server"
#       cmd = "minArcServer -k"
#       system(cmd)
#       
#       Process.kill(9, @serverPID)
            
   end
   
   # --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      ## -----------------------------------------
      ## initialise the logger
      system("\\rm -rf /tmp/minarc_log_file*.log")
      
      loggerFactory = CUC::Log4rLoggerFactory.new("TEST", "#{@@arcConfigDir}/minarc_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in OrchestratorIngester::initialize"
     	   puts "Could not initialize logging system !  :-("
         puts "Check minARC logs configuration under \"#{@@arcConfigDir}/minarc_log_config.xml\"" 
 	      puts
   	   exit(99)
      end
      
      ## -----------------------------------------      
      puts
      puts "END OF MINARC_UnitTests::#{__method__.to_s}"
      puts
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      puts
      puts "END OF MINARC_UnitTests::#{__method__.to_s}"
      puts

   end
   ## ------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_download
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
        
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
       
      url = "https://localhost:4567/adgs/odata/v1/Products"
   
      ## -------------------------------
      
      if File.exist?("S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z") == true
         File.delete("S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z")
      end

#      ## -------------------------------
#      ## well-formed download request
#      uuid = "1234-acds-22e2e121e"
#
#      cmd = "curl -s -k -u test:test \'#{url}(#{uuid})/\$value\' "
#      puts cmd
#      system(cmd)
#      ## -------------------------------
#
#      ## -------------------------------
#      ## well-formed unsupported request / bad request
#      uuid = "1234-acds-22e2e121e"
#
#      cmd = "curl -s -k -u test:test \'#{url}(#{uuid})/\$count\' "
#      puts cmd
#      system(cmd)
#      ## -------------------------------

      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      uuid =  ret.chop.gsub("\"","")
      puts cmd
      puts ret
      puts uuid
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------
   
      ## -------------------------------
      ## well-formed download request / good request
#      cmd = "curl -s -k -u test:test \'#{url}(#{uuid})/\$value\' "
#      puts cmd
#      ret = system(cmd)      
#      assert(ret, "successful curl download")
      
      if File.exist?("S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z") == true
         File.delete("S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z")
      end
      
      theURL = "#{url}(#{uuid})/\$value"
      puts theURL
      ret = getFile(theURL, false, "test", "test", "thefile", false)
      
      assert(ret, "File download with WrapperCURL.getFile")
      
      if File.exist?("S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z") == true
         File.delete("S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z")
      end

      ## -------------------------------
   
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_name
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------

      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / bad function request
      cmd = "curl -s -k -u test:test \'#{url}$filter=notsupportedfunction(Name,'S2')' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / bad property request
      cmd = "curl -s -k -u test:test \'#{url}$filter=startswith(File,'S2')' "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      
      ## -------------------------------

   
      ## -------------------------------
      ## well-formed query request / good request
      cmd = "curl -s -k -u test:test \'#{url}$filter=startswith(Name,'S2')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
          
      ## -------------------------------
 
      ## -------------------------------
      ## well-formed query request / good request with no results
      cmd = "curl -s -k -u test:test \'#{url}$filter=endswith(Name,'S2')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
          
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / good request with results
      cmd = "curl -s -k -u test:test \'#{url}$filter=endswith(Name,'21000101T000001')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
          
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request / good request
      cmd = "curl -s -k -u test:test \'#{url}$filter=contains(Name,'S2')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
          
      ## -------------------------------

  
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_orderby
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      # system("\\rm -rf /tmp/minarc_log_file*.log")
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=PublicationDate%20DESC' | jq .value[].PublicationDate"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=PublicationDate%20ASC' | jq .value[].PublicationDate"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=PublicationDate' | jq .value[].PublicationDate"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=Name%20DESC' | jq .value[].Name"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=Name%20ASC' | jq .value[].Name"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=Name' | jq .value[].Name"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=DonaldDuck%20ASC' | jq .value[].Name"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=Name%20rescending' | jq .value[].Name"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / correct attribute request
      cmd = "curl -s -k -u test:test \'#{url}$orderby=ContentLength%20DESC' | jq .value[].ContentLength"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / good request
      cmd = "curl -s -k -u test:test \'#{url}$filter=contains(Name,'S2')\&$orderby=Name%20DESC' | jq .value[].Name"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
          
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20gt%202020-05-15T00:00:00.000Z\&$orderby=Name%20DESC' | jq .value[].Name"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20gt%202020-05-15T00:00:00.000Z\&$orderby=PublicationDate%20DESC' | jq .value[].PublicationDate"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20gt%202020-05-15T00:00:00.000Z\&$orderby=PublicationDate' | jq .value[].PublicationDate"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate lt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=PublicationDate%20lt%202020-05-15T00:00:00.000Z\&$orderby=PublicationDate' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$count=true\&$filter=PublicationDate%20gt%202020-05-15T00:00:00.000Z\&$orderby=PublicationDate' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20gt%202020-05-15T00:00:00.000Z\&$orderby=PublicationDate%20DESC\&$count=true' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / good request
      cmd = "curl -s -k -u test:test \'#{url}$filter=contains(Name,'S2')\&$orderby=ContentDate/Start%20DESC' | jq .value[].ContentDate.Start"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
          
      ## -------------------------------

#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "grep ARC_210 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 
  
   end
   ## -----------------------------------------------------------
   ## -----------------------------------------------------------

   def test_odata_query_date
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate lt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20lt%202020-05-15T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate le 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20le%202020-05-15T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20gt%202020-05-15T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate ge 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20ge%202020-05-15T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "grep ARC_210 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 


      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2019-05-15T00:00:00.000Z and ContentDate/End lt 2019-05-16T00:00:00.000Z
  
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_validity_date
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2019-05-15T00:00:00.000Z
            
      cmd = "curl -s -k -u test:test \'#{url}$filter=ContentDate/Start%20gt%202019-05-15T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/End le 2119-05-15T00:00:00.000Z
            
      cmd = "curl -s -k -u test:test \'#{url}$filter=ContentDate/End%20le%202119-05-15T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with start > end which should never return results
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2119-05-15T00:00:00.000Z AND ContentDate/End lt 2119-05-16T00:00:00.000Z

            
      cmd = "curl -s -k -u test:test \'#{url}$filter=ContentDate/Start%20gt%202119-05-15T00:00:00.000Z%20and%20ContentDate/End%20lt%202119-05-16T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with start > end which should never return results
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=ContentDate/Start gt 2119-05-15T00:00:00.000Z AND ContentDate/End lt 2119-05-16T00:00:00.000Z

            
      cmd = "curl -s -k -u test:test \'#{url}$filter=ContentDate/Start%20ge%202019-05-15T00:00:00.000Z%20and%20ContentDate/End%20lt%202119-05-16T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------

#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "grep ARC_210 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 


   end
   ## -----------------------------------------------------------
   ## -----------------------------------------------------------
   ##
   ## https://<service-root-uri>/odata/v1/Products?$count=true

   def test_odata_query_count
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
         
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request
      
      ## https://<service-root-uri>/odata/v1/Products?$count=true

      url = "#{@@server}#{ARC_ODATA::API_URL_PRODUCT}"
      
      cmd = "curl -s -k -u test:test \'#{url}/$count?'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------
   ##
   ## /odata/v1/Products$count=true&$filter=startswith(Name,'S2A')

   def test_odata_query_count_name
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with negative results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S1B')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S1B')' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with negative results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S1B')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S1B')\&$count=true' | jq '.count, .value[].Name'"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2B')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S2B')' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2A')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S2A')' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$count=true\&$filter=startswith(Name,'S2')' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$filter=startswith(Name,'S2')\&$count=true' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request request with positive results
      
      ## https://<service-root-uri>/odata/v1/Products$count=true&$filter=startswith(Name,'S2B')
      
      cmd = "curl -s -k -u test:test \'#{url}Products?$filter=startswith(Name,'S2B')\&$count=true' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "grep ARC_210 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 

   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_skip
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / skip 1 item / 0 items left
      cmd = "curl -s -k -u test:test \'#{url}$skip=1\&$filter=startswith(Name,'S2A')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / skip 1 item / 0 items left
      cmd = "curl -s -k -u test:test \'#{url}$filter=startswith(Name,'S2B')\&$skip=1' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request / skip 1 item
      cmd = "curl -s -k -u test:test \'#{url}$skip=1\&$filter=startswith(Name,'S2')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / skip 1 item
      cmd = "curl -s -k -u test:test \'#{url}$filter=startswith(Name,'S2')\&$skip=1' | jq "
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query date request request / skip 1 item
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$skip=1\&$filter=PublicationDate%20gt%202020-05-15T00:00:00.000Z' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query date request request / skip 1 item
      
      ## https://<service-root-uri>/odata/v1/Products?$filter=PublicationDate gt 2020-05-15T00:00:00.000Z
      
      cmd = "curl -s -k -u test:test \'#{url}$filter=PublicationDate%20ge%202020-05-15T00:00:00.000Z\&$skip=1' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------

#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "grep ARC_210 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 

  
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_top
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request / top 1 item
      cmd = "curl -s -k -u test:test \'#{url}$filter=startswith(Name,'S2')\&$top=1' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request changing order / top 1 items
      cmd = "curl -s -k -u test:test \'#{url}$top=1\&$filter=startswith(Name,'S2')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request / top 1 item
      cmd = "curl -s -k -u test:test \'#{url}$filter=startswith(Name,'S2')\&$top=2' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request / skip 1 + top 1 item
      cmd = "curl -s -k -u test:test \'#{url}$skip=1\&$filter=startswith(Name,'S2')\&$top=1' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / top 1 + skip 1 item
      cmd = "curl -s -k -u test:test \'#{url}$top=1\&$skip=1\&$filter=startswith(Name,'S2')' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / top 1 + skip 1 item
      cmd = "curl -s -k -u test:test \'#{url}$top=1\&$filter=startswith(Name,'S2')\&$skip=1' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------
      ## well-formed query request / skip 1 + top 2 item => replies just one
      cmd = "curl -s -k -u test:test \'#{url}$skip=1\&$filter=startswith(Name,'S2')\&$top=2' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / skip 2 + top 2 item => no replies
      cmd = "curl -s -k -u test:test \'#{url}$skip=2\&$filter=startswith(Name,'S2')\&$top=2' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request / skip 1 + top 2 item => replies just one
      cmd = "curl -s -k -u test:test \'#{url}$filter=startswith(Name,'S2')\&$top=2\&$skip=1' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------

#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "grep ARC_210 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 

  
   end
   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_odata_query_expand
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
              
      cmd = ""

      config = ReadMinarcConfig.instance   
      server = config.getArchiveServer
      
      
      url = "#{server}#{ARC_ODATA::API_URL_PRODUCT_QUERY}"
   
      ## -------------------------------
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq .uuid"
      ret = `#{cmd}`
      puts cmd
      puts 
      uuid =  ret.chop.gsub("\"","")
      assert($?.exitstatus, "Retrieving the uuid")
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request but not recognized entity
      cmd = "curl -s -k -u test:test \'#{url}$expand=Donald' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------

      ## -------------------------------
      ## well-formed query request 
      cmd = "curl -s -k -u test:test \'#{url}$expand=Attributes' | jq"
      puts cmd
      ret = system(cmd)      
      assert(ret, "successful curl query")
      
      ## -------------------------------


      ## -------------------------------

#      arr = Dir["/tmp/minarc_log_file*.log"]
#
#      cmd = "grep ARC_777 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 
#      
#      cmd = "grep ARC_210 #{arr[0]}"
#      puts cmd
#      assert(system(cmd), "see query traces #{__method__.to_s}") 

  
   end

   ## -----------------------------------------------------------

   def test_command_delay

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      ## Query by PublicationDate for Sentinel-2A
            
      cmd = "decODataClient -u test -p test -H 2 -q test_adgs:s2:S2A -L /tmp -D"
      puts cmd
      assert(system(cmd), "#{cmd} delay query")
      puts
      
   end
   
   ## -----------------------------------------------------------

   ## ------------------------------------------------------
   def test_command_download

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts
      
      cmd = "rm -f /tmp/S2*"
      puts cmd
      system(cmd)
      
      cmd = "decODataClient -u test -p test -q test_adgs:s2:S2 --creation \"2021-03-16T00:00:00.000,2022-03-16T00:05:00.000\" -L /tmp -r"  # "-D"
      puts cmd
      assert(system(cmd), "#{cmd} query")
      puts

      sleep(5.0)
   
   
      cmd = "minArcStatus -f S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001 | jq"
      puts cmd
      assert(system(cmd), "#{cmd} query")
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------
   def test_command_auth_failure

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s} START")
      cmd = "rm -f /tmp/S2*"
      puts cmd
      system(cmd)
      
      cmd = "decODataClient -u nonexiting -p test -q test_adgs:s2:S2 --creation \"2021-03-16T00:00:00.000,2022-03-16T00:05:00.000\" -L /tmp -r"  # "-D"
      puts cmd
      assert(!system(cmd), "#{cmd} query")
      puts

      cmd = "decODataClient -u test -p test3 -q test_adgs:s2:S2 --creation \"2021-03-16T00:00:00.000,2022-03-16T00:05:00.000\" -L /tmp -r"  # "-D"
      puts cmd
      assert(!system(cmd), "#{cmd} query")
      puts

      arr = Dir["/tmp/minarc_log_file*.log"] 
      cmd = "grep ARC\_600 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "logged message")
      
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## ------------------------------------------------------

end


## ====================================================================

