#!/usr/bin/env ruby

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'ctc/WrapperCURL'
require 'ctc/API_MINARC_OData'

require 'arc/MINARC_Environment'
require 'arc/MINARC_Client'
require 'arc/MINARC_Status'
require 'arc/ReadMinarcConfig'

      
### rake -f build_minarc.rake minarc:install[borja,localhost,s2_test_pg]

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed

##  0.0  - test_md5
##  0.1  - test_ReadConfig
##  0.2  - test_commandline_helpers
##  0.3  - test_minArcDB
##  1.0  - test_local_minArcStore
##  1.1  - test_local_minArcStore_Errors
##  1.2  - test_local_minArcStore_Bulk
##  1.3  - test_local_minArcStore_AUXIP
##  2  - test_local_minArcRetrieve
##  3  - test_local_purge
##  4  - test_local_status_filename
##  5  - test_remote_status_filename
##  6  - test_remote_delete
##  7  - test_remote_retrieve
##  8  - test_remote_api_version
##  9  - test_remote_api_retrieve_file
## 10  - test_remote_api_retrieve_type
## 11  - test_remote_api_delete
## 12  - test_remote_api_requestArchive
## 13  - test_local_and_remote_status_global
## 14.1  - test_handler_s2pdgs
## 14.2  - test_handler_auxip
## 15  - test_handler_m2ts_local
## 16  - test_handler_m2ts_local_mp4
## 17  - test_local_minArcFile
## 18  - test_minArcServer
## 19  - test_odata_server
## 20  - test_train_server
## 21  - test_minArcReallocate
## 22  - test_contingency

class TestCaseStore < Test::Unit::TestCase

   include CTC::WrapperCURL

   include CUC::DirUtils
   include ARC
   include ARC_ODATA

   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   # --------------------------------------------------------
   
   Test::Unit.at_start do      
      
      system("clear")
      
      puts
      puts "======================================"
      puts "MINARC Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      if c != 'Y' then
         exit(99)
      end
      
      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config


      puts      
      @@conf.wrapper_print_environment
      puts
 
      ## Mixin does not work !!!!!
      ## checkDirectory(ENV["MINARC_ARCHIVE_ROOT"])
      system("mkdir -p /tmp/minarc/archive_root")
      system("mkdir -p /tmp/minarc/tmp")
 
      if @@conf.wrapper_check_environment == false then
         puts "minArc environment not suited for unit tests"
         puts
         exit(99)
      end
 
#      puts "call start teardown"
#      self.teardown
#      puts "call end teardown"


      begin
         cmd = "minArcDB -d"
         @@logger.debug(cmd)
         ret = system(cmd)

         cmd = "minArcDB -c"
         @@logger.debug(cmd)
         ret = system(cmd)
         
         cmd = "minArcDB -a test:test"
         @@logger.debug(cmd)
         ret = system(cmd)
         
      rescue Exception => e
      end

      begin
         cmd = "minArcPurge -Y"
         @@logger.debug(cmd)
         # ret = system(cmd)
      rescue
      end



=begin
      puts
      puts "GEM DATADIR = #{Gem.datadir("minarc")}"
      puts
      
      rootpath = nil
      
      if Gem.datadir("minarc") == nil then
         rootpath = ENV['DEC_BASE']
         @testDir = File.join(rootpath, "code/arc/plugins/test/")
      else
         rootpath = Gem.datadir("minarc")
         @testDir = File.join(rootpath, "../../code/arc/plugins/test/")
      end
      
=end
      
      @@testDataDir        = File.join( File.dirname(File.expand_path(__FILE__)), "plugins/test" )
      @@testFile1          = "S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      @@testFile2          = "S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      @@filename1_noext    = "S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001"
      @@filename2_noext    = "S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001"
      @@faultyTestFile1    = "S2B_OPER_REP_PASS_E_VGS2_20210810T083015_V20210810T062447_20210810T62741.EOF"
      @@errorZone          = ENV['MINARC_ARCHIVE_ERROR']

      system("rm -f #{@@testDataDir}/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z")
      system("rm -f #{@@testDataDir}/20110204T193316_000001.m2ts")

      @@prevDir = Dir.pwd     
      Dir.chdir(@@testDataDir)
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      system("echo \'S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2B_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      Dir.chdir(@@prevDir)

      system("minArcServer -k")
      prevDir = Dir.pwd
      Dir.chdir(ENV['MINARC_TMP'])
      
            
      puts "init server"
      FileUtils.rm_f("#{ENV['MINARC_TMP']}/minarc_server.out")
      # @serverPID = spawn("minArcServer -s > #{ENV['MINARC_TMP']}/minarc_server.out 2>&1")
      @serverPID = spawn("minArcServer -s > #{ENV['MINARC_TMP']}/minarc_server.out 2>&1")
      Dir.chdir (prevDir)
      puts @serverPID

      sleep(2.0)

      @@arrInputFiles = [ \
                           "EDR_OPER_SER_SR1_OA_PDMC_20210816T224004_V20210816T221504_20210816T223203", \
                           "EDR_OPER_SER_SR1_OA_PDMC_20210816T232004_V20210816T22553120210816T230946",\
                           "S2__OPER_SRA_EDRS_A_PDMC_20180719T030000_V20180719T030000_20180831T233257.EOF", \
                           "S2B_OPER_REP_OPDPC__SGS__20180721T061746_V20180721T061746_20180721T061746.EOF", \
                           "S2B_OPER_REP_OPDPC__MPC__20180721T061746_V20180721T061746_20180721T061746.EOF", \
                           "S2__OPER_REP_ARC____EPA__20180721T110140_V20180721T085229_20180721T085414.EOF", \
                           "S2__OPER_REP_ARC____MPC__20180721T110140_V20180721T085229_20180721T085414.EOF", \
                           "S2__OPER_REP_OPAI___EPA__20180721T130012_V20180721T010002_20180721T130001.EOF", \
                           "S2__OPER_REP_OPAI___MPC__20180721T130012_V20180721T010002_20180721T130001.EOF", \
                           "S2A_OPER_MPL__NPPF__20180720T110000_20180806T140000_0001.TGZ", \
                           "S2__OPER_REP_OPLTAS_UPA__20180722T060002_V20180721T030002_20180722T060002.EOF", \
                           "S2A_OPER_MPL__NPPF__20180820T110000_20180906T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20190420T110000_20190426T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20170820T110000_20170906T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20180920T110000_20180926T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20190520T110000_20190526T140000_0001.TGZ", \
                           "S2A_OPER_MPL_ORBPRE_20180720T030221_20180730T030221_0001.EOF", \
                           "S2A_OPER_REP_PASS_E_EDRS_20180720T235700_V20180720T234817_20180720T235645.EOF", \
                           "S2A_OPER_REP_STNACQ_SGS__20180724T123414_V20180724T120243_20180724T121539.EOF", \
                           "S2A_OPER_MPL_SPMPS__PDMC_20180719T090005_V20180720T090000_20180726T090000.EOF", \
                           "S2A_OPER_MPL_FSSGS__PDMC_20180719T090008_V20180720T090000_20180726T090000.EOF", \
                           "S2__OPER_REP_OPLTA__EPA__20180721T130015_V20180721T010002_20180721T130001.EOF", \
                           "S2__OPER_REP_OPLTAS_UPA__20190522T060002_V20190521T030002_20190522T060002.EOF", \
                           "S2__OPER_GIP_PROBA2_MPC__20190502T000212_V20190506T004000_21000101T000000_B00.TGZ", \
                           "S2A_OPER_GIP_PROBAS_MPC__20190307T000207_V20190311T000000_21000101T000000_B00.TGZ", \
                           "S2__OPER_REP_OPDAM1_PDMC_20180721T110501_V20180721T085229_20180721T085229.EOF" \
                           ]
                       
                       
      @@arcConfigDir = File.join(File.dirname(File.expand_path(__FILE__)), "../../config")
      puts
      puts @@arcConfigDir
      puts                   
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("ARCTEST", "#{@@arcConfigDir}/minarc_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in OrchestratorIngester::initialize"
     	   puts "Could not initialize logging system !  :-("
         puts "Check minARC logs configuration under \"#{@@arcConfigDir}/minarc_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

            
   end
   
   # --------------------------------------------------------
   
   Test::Unit.at_exit do
#       puts "End of tests"
#             
#       puts "Killing MINARC_Server"
#       cmd = "minArcServer -k"
#       system(cmd)
#       
#       Process.kill(9, @serverPID)
            
   end
   
   # --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts


      cmd = "minArcDB -d"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "minArcDB -c"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcDB first time")
      
      cmd = "minArcDB -a test:test"
      @@logger.debug(cmd)
      assert(system(cmd), "created used test")
      
      
      
      system("\\rm -rf /tmp/minarc_log_file*.log")
      
      cmd = "minArcPurge -Y"
      ret = system(cmd)

      if ret == false then
         puts "Error when cleaning the minarc root directory ! :-("
         puts
         exit(99)
      end

      
      @path = "#{ENV['MINARC_BASE']}/code/arc"
      
      Dir.chdir(@@testDataDir)
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      system("\\rm -f #{@@testDataDir}/#{@@filename1_noext}.7z")
      
      Dir.chdir(@@prevDir)    

      puts
      puts Dir.pwd
      puts
      puts "END OF MINARC_UnitTests::#{__method__.to_s}"
      puts
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      puts
      puts "END OF MINARC_UnitTests::#{__method__.to_s}"
      puts

   end
   ## ------------------------------------------------------

   def test_md5
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      require 'cuc/Wrapper_md5sum'
      full_path_filename = "/tmp/test_file_md5"
      system("echo \'my test md5\' > #{full_path_filename}")
      
      assert(CUC::WrapperMD5SUM.new(full_path_filename).md5 != nil, "MD5 computation")
      assert(CUC::WrapperMD5SUM.new(full_path_filename).md5.length == 32, "32 bytes")
   end

   ## ------------------------------------------------------
   
   def test_ReadConfig
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      config = ReadMinarcConfig.instance
           
      arrFreqs = config.getFrequencies
      assert(arrFreqs != nil, "get frequencies recovered")

      dbConfig = config.getInventory
      assert(dbConfig != nil, "get inventory database configuration")
   
      server  = config.getArchiveServer
      puts server
      assert(server != nil, "get Archive Server")
   
      root  = config.getArchiveRoot
      puts root
      assert(root != nil, "get Archive Root")

      error  = config.getArchiveError
      puts error
      assert(error != nil, "get Archive Error")

      tmpDir = config.getTempDir
      puts tmpDir
      assert(tmpDir != nil, "get temp directory")

      node = config.getNode
      puts node
      assert(node != nil, "get node")
   
      name = config.getClientUser
      puts name
      assert(name != nil, "client name")
 
      pass = config.getClientPassword
      puts pass
      assert(pass != nil, "client password")
  
   
   end
   ## ------------------------------------------------------

   def test_commandline_helpers
   
      @@conf.wrapper_unset_config

      cmd = "minArcFile -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcDelete -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      cmd = "minArcStore -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcRetrieve -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcStatus -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcDB -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcPurge -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcServer -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcServer -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcStore -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcStore -g"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcRetrieve -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcFile -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcRetrieve -u"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcStatus -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcStatus -u"
      assert(system(cmd), cmd)

      cmd = "minArcDelete -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcDelete -u"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcPurge -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcPurge -u"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcDB -h"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcDB -u"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      # invoke command line parameters without parameters to do nothing
      # and return error in parameters

      cmd = "minArcDelete"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcRetrieve"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcDB"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcPurge"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcServer"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcStatus"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcStore"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcFile"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcReallocate -v"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      
   end
   
   ## -----------------------------------------------------------
   
   def test_minArcDB
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "minArcDB -d"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "minArcDB -c"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcDB first time")

      cmd = "minArcDB -c"
      @@logger.debug(cmd)
      assert(!system(cmd), "minArcDB second time / error raised")

      cmd = "minArcDB -c -H"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcDB second time / happy ending")
      
      ## -----------------------------------------
      ## Need to alter MINARC_Migrations::CreateArchivedFiles
      
      cmd = "cp #{@@testDataDir}/#{@@testFile1} /tmp/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcStore -t S2PDGS -f /tmp/#{@@testFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")

      cmd = "minArcStatus -f #{@@filename1_noext} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStatus")
      
      ## -----------------------------------------
      
      cmd = "minArcDB -U"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcDB Update")

      cmd = "minArcStatus -f #{@@filename1_noext} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStatus")


      ## -------------------------------
      ## Users management

      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config

      @@conf.wrapper_print_environment
      
      require 'arc/MINARC_DatabaseModel'
      
      now = Time.now
      
      user = User.new(name: 'mario', password: 'cipollini', created_at: now)
      user.save
            
      assert(user.authenticate('cipollini') != false, "authenticated password for #{user.name}")
      assert(user.authenticate('wrong_pass') == false, "not authenticated password for #{user.name}")

      user = User.new(name: 'mario', password: 'cipollini', created_at: now)
      user.save

      
      cmd = "minArcDB -a test:test -D"
      @@logger.debug(cmd)
      assert(system(cmd), "created used test")
      
      user = User.find_by name: "test"
      assert(user.authenticate('test') != false, "authenticated password for #{user.name}")
            
      @@conf.unset_config
      
      ## -------------------------------      
   end
   ## -----------------------------------------------------------
   ##
   ## 
   def test_local_minArcStore
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      system("mkdir -p /tmp/minarc/tmp/")
      
      cmd = "cp #{@@testDataDir}/#{@@testFile1} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "cp #{@@testDataDir}/#{@@testFile2} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")

      cmd = "minArcStatus -f #{@@filename1_noext} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStatus")
 
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile2} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")

      cmd = "minArcStatus -f #{@@filename2_noext} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStatus")
     
      system("\\rm -f /tmp/minarc/tmp/#{@@filename1_noext}.7z")
      system("\\rm -f /tmp/minarc/tmp/#{@@filename2_noext}.7z")
      
      arr = Dir["/tmp/minarc_log_file*.log"]
      
      cmd = "grep ARC_100 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "see successful operations #{__method__.to_s}") 

   end
   ## ------------------------------------------------------


   ## -----------------------------------------------------------
   ##
   ## 
   def test_local_minArcStore_Errors
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      system("mkdir -p /tmp/minarc/tmp/")
      
      cmd = "cp #{@@testDataDir}/#{@@testFile1} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "cp #{@@testDataDir}/#{@@testFile2} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcStore -t AUXIP -f /tmp/minarc/tmp/#{@@testFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")
 
      cmd = "minArcStore -t AUXIP -f /tmp/minarc/tmp/#{@@testFile2} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")
     
      system("\\rm -f /tmp/minarc/tmp/#{@@filename1_noext}.7z")
      system("\\rm -f /tmp/minarc/tmp/#{@@filename2_noext}.7z")
      
      arr = Dir["/tmp/minarc_log_file*.log"]
      
      cmd = "grep ARC_100 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "see successful operations #{__method__.to_s}") 

      ## archive repetition which shall fail due to missing file in input     
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(!system(cmd), "minArcStore")


      ## archive repetition which shall fail due to previously archived file     
      cmd = "cp #{@@testDataDir}/#{@@testFile1} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(!system(cmd), "minArcStore")

      cmd = "grep ARC_605 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "see successful operations #{__method__.to_s}") 
      
      cmd = "echo \'#{@@faultyTestFile1}\' > /tmp/minarc/tmp/#{@@faultyTestFile1}"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@faultyTestFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(!system(cmd), "minArcStore")

      ## ---------------------
      ## bulk mode with faulty files
      
      cmd = "echo \'#{@@faultyTestFile1}\' > /tmp/minarc/tmp/#{@@faultyTestFile1}"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "minArcStore -t S2PDGS -f \"/tmp/minarc/tmp/*\" --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")
      ## ---------------------
            
   end
   ## ------------------------------------------------------

   ## Handler_S2PDGS works with
   ## > the -m --move flag
   ## > the -M --Mutex flag
   
   def test_local_minArcStore_Bulk
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      system("mkdir -p /tmp/minarc/tmp/")
      
      @@arrInputFiles.each{|filename|
         puts "minArcUnitTests::#{__method__.to_s} #{filename}"
         system("echo \'#{filename}\' > /tmp/minarc/tmp//#{filename}")
      }

      sleep(3.0)

      cmd = "minArcStore -t S2PDGS -f \"/tmp/minarc/tmp/S2*\" --noserver -m -M -D"
      @@logger.debug(cmd)
      assert(spawn(cmd), "minArcStore bulk mode")
      sleep(1.0)

      cmd = "minArcStore -t S2PDGS -f \"/tmp/minarc/tmp/S2*\" --noserver -m -M"
      @@logger.debug(cmd)
      assert(!system(cmd), "minArcStore bulk mode should be blocked")

      cmd = "minArcRetrieve -T"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore Types")


      @@arrInputFiles.each{|filename|
         cmd = "minArcStatus -f #{File.basename(filename, ".*")}"
         @@logger.debug(cmd)
         assert(system(cmd), "minArcStatus")
      }

      sleep(6.0)

      cmd = "minArcStore -t S2PDGS -f \"/tmp/minarc/tmp/S2*\" --noserver -m -M"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore bulk mode")

      ## minArcRetrieve remote mode
      
      cmd = "minArcRetrieve -f \"S2*\" --list"
      @@logger.debug(cmd)
      assert(system(cmd), "list files using remote mode")
      

   end
   ## ------------------------------------------------------

   ## -----------------------------------------------------------
   ##
   ## 
   def test_local_minArcStore_AUXIP
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      @@logger.debug("MINARC_UnitTests::#{__method__.to_s}")
      
      system("mkdir -p /tmp/minarc/tmp/")
      
      system("echo \'EDR_OPER_SER_SR1_OA_PDMC_20210816T224004_V20210816T221504_20210816T223203\' > /tmp/minarc/tmp/EDR_OPER_SER_SR1_OA_PDMC_20210816T224004_V20210816T221504_20210816T223203")
      
      system("echo \'EDR_OPER_SER_SR1_OA_PDMC_20210816T232004_V20210816T22553120210816T230946\' > /tmp/minarc/tmp/EDR_OPER_SER_SR1_OA_PDMC_20210816T232004_V20210816T22553120210816T230946")
            
      cmd = "minArcStore -t AUXIP -f /tmp/minarc/tmp/EDR_OPER_SER_SR1_OA_PDMC_20210816T224004_V20210816T221504_20210816T223203 --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")

      cmd = "minArcStatus -f EDR_OPER_SER_SR1_OA_PDMC_20210816T224004_V20210816T221504_20210816T223203 --noserver | jq"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")

      cmd = "minArcStore -t AUXIP -f /tmp/minarc/tmp/EDR_OPER_SER_SR1_OA_PDMC_20210816T232004_V20210816T22553120210816T230946 --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")
      
      cmd = "minArcStatus -f EDR_OPER_SER_SR1_OA_PDMC_20210816T232004_V20210816T22553120210816T230946 --noserver | jq"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")

      
      arr = Dir["/tmp/minarc_log_file*.log"]
      
      cmd = "grep ARC_100 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "see successful operations #{__method__.to_s}") 

   end
   ## ------------------------------------------------------

   
   def test_local_minArcRetrieve
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      test_local_minArcStore
      
      cmd = "minArcRetrieve -T --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcRetrieve -T --noserver")
      
      cmd = "minArcRetrieve -T"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcRetrieve -T")   

   end
   ## --------------------------------------------------------

   def test_DBModel
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      test_local_minArcStore

      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config

      @@conf.wrapper_print_environment

      require 'arc/MINARC_DatabaseModel'
            
      aFile = ArchivedFile.where(name: @@filename1_noext)
      
      puts
      aFile.to_a[0].print_introspection
      puts
      
      @@conf.unset_config
            
   end
   ## --------------------------------------------------------

   def test_local_purge
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
   
      test_local_minArcStore
   
      cmd = "minArcPurge -Y"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   end

   # -------------------------------------------------------------

   def test_local_status_filename
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      test_local_minArcStore

      puts
      puts

      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq"
      puts
      @@logger.debug(cmd)
      puts
      assert(system(cmd), cmd)
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver | jq '.url'"
      puts
      @@logger.debug(cmd)
      puts
      assert(system(cmd), cmd)      
    
   end

   ## -----------------------------------------------------------
   ## -----------------------------------------------------------
   def test_remote_status_filename
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
            
      test_local_minArcStore
            
      Dir.chdir(@@prevDir)
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} | jq"
      puts
      @@logger.debug(cmd)
      puts
      assert(system(cmd), cmd) 
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} | jq '.name'"
      puts
      @@logger.debug(cmd)
      puts
      assert(system(cmd), cmd)
      
      cmd = "minArcStatus -t REP_OPDPC_ | jq"
      puts
      @@logger.debug(cmd)
      puts
      assert(system(cmd), cmd)  

   end
   ## -----------------------------------------------------------
   
   def test_remote_delete
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
   
      @@logger.debug("MINARC_UnitTests::#{__method__.to_s}")
   
      test_local_minArcStore

#      cmd = "minArcServer -k"
#      @@logger.debug(cmd)
#      assert(system(cmd), cmd)
#
#      cmd = "minArcServer -s"
#      @@logger.debug(cmd)
#      assert(spawn(cmd), cmd)
      
      cmd = "minArcDelete -f #{File.basename(@@testFile1, ".*")} -D"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcDelete")
      
   end

   # -------------------------------------------------------------
      
   def test_remote_retrieve
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
  
      test_local_minArcStore
      
      Dir.chdir(@@prevDir)
      system("\\rm -f #{@@filename1_noext}*") 
 
   
      puts "Set environment variables to remote only"
      @@conf.wrapper_setRemoteModeOnly
      puts
   
      cmd = "minArcRetrieve -f #{File.basename(@@testFile1, ".*")} -D"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      assert(File.exist?("#{File.basename(@@testFile1, ".*")}.7z"), "file retrieved")
                  
      cmd = "\\rm -f #{Dir.pwd}/#{@@filename1_noext}.7z"
      @@logger.debug(cmd)
      system(cmd)
  
      cmd = "minArcRetrieve -f #{File.basename(@@testFile1, ".*")} -D -U"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      assert(File.exist?("#{File.basename(@@testFile1, ".*")}.EOF"), "file retrieved")
  
      puts Dir.pwd
      puts      
      cmd = "\\rm -f #{Dir.pwd}/#{@@filename1_noext}.EOF"
      @@logger.debug(cmd)
      system(cmd)
  
      
   end

   ## ----------------------------------------------------------- 
   ##
   
   def test_remote_api_version
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

#      cmd = "minArcServer -k"
#      @@logger.debug(cmd)
#      system(cmd)
#
#      sleep(2.0)
#
#      cmd = "minArcServer -s &"
#      @@logger.debug(cmd)
#      spawn(cmd)

      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config

      @@conf.wrapper_print_environment

      arc = ARC::MINARC_Client.new(@@logger)
      arc.setDebugMode

      version = arc.getVersion
      
      puts "MINARC Version #{version}"
      assert( (version != "") , "Verification remote API_URL_VERSION: #{API_URL_VERSION}")
      
      @@conf.wrapper_unset_config 
      
      
      @@conf.wrapper_print_environment
      
      puts
      puts "END OF MINARC_UnitTests::#{__method__.to_s}"
      puts "================================================"
      puts

      
   end
   ## -----------------------------------------------------------

=begin
   def test_remote_api_store
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      
      arc = ARC::MINARC_Client.new(@logger)
      # arc.setDebugMode

      type     = "S2PDGS"
      bDelete  = false
      assert( arc.storeFile("#{@@testDataDir}/#{@@testFile1}", type, bDelete) , "Verification remote API_URL_STORE: #{API_URL_STORE}")
   end

=end   

   # -------------------------------------------------------------

   def test_remote_api_retrieve_file
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      test_local_minArcStore
      
      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config

      @@conf.wrapper_print_environment
         
      arc = ARC::MINARC_Client.new(@@logger, true)
      arc.setDebugMode
      
      Dir.chdir(@@prevDir)
      system("rm -f #{@@testDataDir}/#{@@filename1_noext}.7z")

      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
         puts e.to_s
         puts "Could not create directory in #{Dir.pwd}"
         puts "Could not create directory #{dir1}"
      end

      pwd = Dir.pwd
      
      Dir.chdir(dir1)


      cmd = "\\rm -f #{File.basename(@@testFile1, ".*")}*"
      @@logger.debug(cmd)
      system(cmd)
      puts Dir.pwd

      assert( \
               arc.retrieveFile(File.basename(@@testFile1, ".*")), \
               "Verification remote API_URL_RETRIEVE: #{API_URL_RETRIEVE}" \
               )
                     
      arr = Dir["#{File.basename(@@testFile1, ".*")}*"]
      
      assert(!arr.empty?, "File retrieved #{arr[0]}")
            
      system("\\rm -f #{arr[0]}")
      
      Dir.chdir(pwd)
      
      puts Dir.pwd
      
      cmd = "\\rm -rf #{dir1}/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "\\rm -f #{@@filename1_noext}.7z"
      @@logger.debug(cmd)
      system(cmd)
      puts
      puts Dir.pwd
      puts
      puts
      
      @@conf.wrapper_unset_config
      
   end
   ## -----------------------------------------------------------

   def test_remote_api_retrieve_filetype
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      test_local_minArcStore

      Dir.chdir(@@prevDir)

      pwd = Dir.pwd               
#      arc = ARC::MINARC_Client.new(@logger, true)
#      arc.setDebugMode
#
#      type     = "S2PDGS"
#      bDelete  = false
#      
#      arc.storeFile(@file, type, bDelete)

      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
         puts e.to_s
         puts "Could not create directory in #{Dir.pwd}"
         puts "Could not create directory #{dir1}"
      end

      Dir.chdir(dir1)

      cmd = "minArcRetrieve -t REP_OPDPC_ -L #{Dir.pwd}"
      
      puts
      @@logger.debug(cmd)
      puts
      
      assert(system(cmd), cmd)
           
      arr = Dir["#{File.basename(@@testFile1, ".*")}*"]
      
      assert(!arr.empty?, "File retrieved #{arr[0]}")
            
      system("\\rm -f #{arr[0]}")
      
      Dir.chdir(pwd)
      
      system("\\rm -rf #{dir1}/")           
   
   end
   # -------------------------------------------------------------

   def test_remote_api_delete
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      test_local_minArcStore
      
      puts
      puts
      
      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config

      @@conf.wrapper_print_environment
      
      
      arc = ARC::MINARC_Client.new(@@logger, true)
      assert( \
               arc.deleteFile(File.basename(@@testFile1, ".*") ), \
               "Verification remote API_URL_DELETE: #{API_URL_DELETE}" \
             )
             
            
      
      @@conf.wrapper_unset_config

             
   end

   ## -------------------------------------------------------------

   def test_remote_api_requestArchive
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      system("mkdir -p /tmp/minarc/tmp/")

      @@arrInputFiles.each{|filename|
         puts "minArcUnitTests::#{__method__.to_s} #{filename}"
         cmd = "echo \'#{filename}\' > /tmp/minarc/tmp/#{filename}"
         @@logger.debug(cmd)
         system(cmd)
      }

      sleep(3.0)


      cmd = "minArcServer -c"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
 
      config = ReadMinarcConfig.instance 
      server = config.getArchiveServer      
      user   = config.getClientUser
      pass   = config.getClientPassword
      verifyPeerSSL = config.getClientVerifyPeerSSL

      
      assert(server != nil, "get Archive Server")   
        
      cmd = "curl -k -s -u #{user}:#{pass} #{server}/dec/arc/requestArchive/*"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      sleep(10.0)
      
      arr = Dir["/tmp/minarc/tmp/*"]
      puts arr
      
      cmd = "minArcStatus -f S2__OPER_GIP_PROBA2_MPC__20190502T000212_V20190506T004000_21000101T000000_B00 | jq"
      puts 
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "cat #{arr[0]}"
#      @@logger.debug(cmd)
#      assert(system(cmd), "see status request traces #{__method__.to_s}") 
      
      cmd = "cat /tmp/minarc_server.out"
      @@logger.debug(cmd)
      assert(system(cmd), "see status request traces #{__method__.to_s}") 
         
   end

   ## -----------------------------------------------------------

   def test_local_and_remote_status_global
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      Dir.chdir(@@prevDir)
      
      system("mkdir -p /tmp/minarc/tmp/")
      
      cmd = "cp #{@@testDataDir}/#{@@testFile1} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "cp #{@@testDataDir}/#{@@testFile2} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")
 
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile2} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")

      cmd = "minArcStatus -g --noserver | jq"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      puts
      puts

      cmd = "minArcStatus -g | jq"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

#      arr = Dir["/tmp/minarc_log_file*.log"]
#      
#      cmd = "grep ARC_230 #{arr[0]}"
#      @@logger.debug(cmd)
#      assert(system(cmd), "see status request traces #{__method__.to_s}") 
            
   end

   ## -----------------------------------------------------------

   def test_handler_s2pdgs
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
         
      testFile1 = "S2__OPER_DEC_F_RECV_2BOA_20200205T183117_V20200205T183117_20200205T183117_SUPER_TCI.xml"
      testFile2 = "S2__OPER_DEC_F_RECV_2BOA_20200205T183117_V20200205T183117_20200205T183117_S2PDGS.xml"
      testFile3 = "DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000.json"
      testFile4 = "WrongFile_DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000.json"
      
      system("echo \'#{testFile1}\' > /tmp/#{testFile1}")
      
      cmd = "minArcStore -t S2PDGS -f /tmp/#{testFile1} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcFile -T S2PDGS -f S2__OPER_DEC_F_RECV_2BOA_20200205T183117_V20200205T183117_20200205T183117_SUPER_TCI -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts 
      puts ret
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcFile -T S2PDGS -f S2__OPER_DEC_F_RECV_2BOA_20200205T183117_V20200205T183117_20200205T183117_SUPER_TCI.xml -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts 
      puts ret
      assert($?.exitstatus, "Decoding of the file with handler")
        
        
      system("echo \'#{testFile2}\' > /tmp/#{testFile2}")
      
      cmd = "minArcStore -t S2PDGS -f /tmp/#{testFile2} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcFile -T S2PDGS -f S2__OPER_DEC_F_RECV_2BOA_20200205T183117_V20200205T183117_20200205T183117_S2PDGS -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcFile -T S2PDGS -f S2__OPER_DEC_F_RECV_2BOA_20200205T183117_V20200205T183117_20200205T183117_S2PDGS.xml -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

      ## ---------------------------------------------------

      system("echo \'#{testFile4}\' > /tmp/#{testFile4}")
      
      cmd = "minArcStore -t S2PDGS -f /tmp/#{testFile4} --noserver"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)
      ## ---------------------------------------------------



      system("echo \'#{testFile3}\' > /tmp/#{testFile3}")
      
      cmd = "minArcStore -t S2PDGS -f /tmp/#{testFile3} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcFile -T S2PDGS -f WrongFile_DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000 -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcFile -T S2PDGS -f DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000.json -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcStatus -f DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000.json --noserver | jq"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

   end

   ## -----------------------------------------------------------

   def test_handler_auxip
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      testDataDir          = File.join( File.dirname(File.expand_path(__FILE__)), "plugins/test" )
      testFile1            = "S1A_TEST_MPL_ORBSCT_20140403T224609_99999999T999999_0006.EOF"
      testFile3            = "DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000.json"
      testFile4            = "DEC_OPER_OPDHUS_S1A_AUIP_20210412T182233_V20210318T000000_20210319T000000_2302_2300.xml"
      
      cmd = "cp -f #{testDataDir}/#{testFile1} /tmp/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcStore -t AUXIP -f /tmp/#{testFile1} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcFile -T AUXIP -f #{testFile1} -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts 
      puts ret
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcStatus -f #{testFile1} --noserver | jq"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "File Status")

      cmd = "minArcDelete -f S1A_TEST_MPL_ORBSCT_20140403T224609_99999999T999999_0006 --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "cp -f #{testDataDir}/#{testFile1} /tmp/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcStore -t AUXIP -f /tmp/#{testFile1}"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcStatus -f #{testFile1} | jq"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "File Status")

      system("echo \'#{testFile3}\' > /tmp/#{testFile3}")
      
      cmd = "minArcStore -t AUXIP -f /tmp/#{testFile3} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcFile -T AUXIP -f WrongFile_DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000 -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcFile -T AUXIP -f DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000.json -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcStatus -f DEC_OPER_OPDHUS_S1A_AUIP_20210325T201708_V20210325T173000_112_000.json --noserver | jq"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")


      system("echo \'#{testFile4}\' > /tmp/#{testFile4}")
      cmd = "minArcStore -t AUXIP -f /tmp/#{testFile4} --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      system("echo \'#{testFile4}\' > /tmp/#{testFile4}")
      
#      cmd = "minArcStore -t AUXIP -f /tmp/#{testFile4} --noserver"
#      @@logger.debug(cmd)
#      assert(!system(cmd), cmd)
   
      cmd = "minArcFile -T AUXIP -f #{testFile4} -t"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")

      cmd = "minArcStatus  -f #{testFile4} --noserver | jq"
      ret = `#{cmd}`
      @@logger.debug(cmd)
      puts
      puts ret
      puts
      assert($?.exitstatus, "Decoding of the file with handler")


   end

   ## -----------------------------------------------------------
   
   def test_handler_m2ts_local
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      cmd = "minArcStore -t m2ts -f #{@@testDataDir}/example_1.m2ts -D --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcRetrieve -t m2ts -l --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
      
      end

      pwd = Dir.pwd
      
      Dir.chdir(dir1)
      
      cmd = "minArcRetrieve -f 20110204T193316_000001 --noserver -L #{Dir.pwd}"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      Dir.chdir(pwd)   
   
      cmd = "\\rm -rf #{dir1}*"
      system(cmd)

   end
   # -------------------------------------------------------------

   def test_handler_m2ts_local_mp4
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      cmd = "minArcStore -t m2ts -f #{@@testDataDir}/example_1.mp4 -D --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      cmd = "minArcRetrieve -t mp4 -l --noserver"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
      
      end

      pwd = Dir.pwd
      
      Dir.chdir(dir1)
      
      cmd = "minArcRetrieve -f 20181029T114813_000002 --noserver -L #{Dir.pwd}"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
   
      Dir.chdir(pwd)   
   
      cmd = "\\rm -rf #{dir1}*"
      system(cmd)

   end
   # -------------------------------------------------------------

   def test_local_minArcFile
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "minArcFile -t S2PDGS"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcFile -f S2A_OPER_REP_OPDPC__SGS__20170214T113527_V20170214T080018_20170214T080336.EOF"
      @@logger.debug(cmd)
      assert(!system(cmd), cmd)

      cmd = "minArcFile -T S2PDGS -f S2A_OPER_REP_OPDPC__SGS__20170214T113527_V20170214T080018_20170214T080336.EOF -t"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcFile -T S2PDGS -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF -s"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcFile -T S2PDGS -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF -e"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)


   end
   ## -------------------------------------------------------------
   ##
   ## minARC inventory is not created

   def test_minArcServer
      @@logger.debug("START => MINARC_UnitTests::#{__method__.to_s}")
      
      cmd = "minArcPurge -Y"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "rm -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001*"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcServer -c -D"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcServer -k -D"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcServer -k -D"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      puts

      cmd = "minArcServer -s -D"
      cmd = "minArcServer -s"
      @@logger.debug(cmd)
      assert(spawn(cmd), cmd)

      puts
      
      sleep(5.0)

      cmd = "minArcServer -s -D"
      @@logger.debug(cmd)
      assert(spawn(cmd), cmd)

      puts
      
      sleep(5.0)
 
      cmd = "minArcServer -c"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcStatus -V"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "minArcRetrieve -T"
      @@logger.debug(cmd)
      ret = system(cmd)

      ## ------------------------------------
      ## store file
      test_local_minArcStore
      ## ------------------------------------

      cmd = "minArcStatus -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      config = ReadMinarcConfig.instance 
      server = config.getArchiveServer    
      user   = config.getClientUser
      pass   = config.getClientPassword
      verifyPeerSSL = config.getClientVerifyPeerSSL

      ## ------------------------------------
      ## request archive polling
      cmd = "curl -s -k -u #{user}:#{pass} #{server}/dec/arc/requestArchive/*"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      cmd = "curl -s -k -u #{user}:#{pass} #{server}/dec/arc/requestArchive/S2A_OPER_REP_OPDPC__SGS*"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      ## ------------------------------------

      puts
      puts
      sleep(2.0)
      
      ## ------------------------------------
      ## retrieve file
      cmd = "minArcRetrieve -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      ## ------------------------------------
      @@logger.debug("END => MINARC_UnitTests::#{__method__.to_s}")
      return

      cmd = "minArcRetrieve -f NON_EXISTING_FILE"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
   end
   ## -------------------------------------------------------------

   ## -------------------------------------------------------------
   ##
   ## odata server

   def test_odata_server
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      cmd = "minArcPurge -Y"
      @@logger.debug(cmd)
      ret = system(cmd)
      
      cmd = "minArcServer -c"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      puts

      cmd = "minArcServer -k"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      puts

      cmd = "minArcServer -s"
      @@logger.debug(cmd)
      assert(spawn(cmd), cmd)

      puts
      
      sleep(5.0)
 
      cmd = "minArcServer -c"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      config = ReadMinarcConfig.instance 
      server = config.getArchiveServer 
      user   = config.getClientUser
      pass   = config.getClientPassword
      
      ## ------------------------------------
      ## request archive polling
      cmd = "curl -s -k -u #{user}:#{pass} \"#{server}/odata/v1/Products?\\$filter=startswith(Name,'S1A_AUX_')\" "
      puts
      @@logger.debug(cmd)
      puts
      system(cmd)
            
      cmd = "curl -s -k -u #{user}:#{pass} \"#{server}/odata/v1/Products?\\$filter=contains(Name,'S2__OPER_AUX_UT1UTC')\" "
      puts
      @@logger.debug(cmd)
      puts
      system(cmd)
            
      
   end
   ## -------------------------------------------------------------

   def test_train_server
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      cmd = "mkdir -p /tmp/minarc/tmp"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "rm -f /tmp/minarc_log_file*.log"
      @@logger.debug(cmd)
      assert(system(cmd), "cleaning logs")
      
      @@logger.info("#{__method__.to_s} START")
      
      sleep(3.0)

      config = ReadMinarcConfig.instance 
      server = config.getArchiveServer  
      user   = config.getClientUser
      pass   = config.getClientPassword
    
      assert(server != nil, "get Archive Server")   
      
      @@arrInputFiles.each{|filename|
         cmd = "echo \'#{filename}\' > /tmp/minarc/tmp//#{filename}"
         @@logger.info(cmd)
         assert(system(cmd), cmd)
         sleep(3.0)
         cmd = "curl -s -k -u #{user}:#{pass} #{server}/dec/arc/requestArchive/*"
         @@logger.info(cmd)
         assert(system(cmd), cmd)
         
         cmd = "ps -ef | grep ruby"
         puts
         @@logger.debug(cmd)
         system(cmd)
         puts
         sleep(3.0)
      }
      
      @@logger.info("#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------
   ##
   ## minARC inventory is not created
   ##
   def test_minArcReallocate
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      system("mkdir -p /tmp/minarc/tmp/")
      
      cmd = "cp #{@@testDataDir}/#{@@testFile1} /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "minArcStore -t S2PDGS -f /tmp/minarc/tmp/#{@@testFile1} --noserver -d"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStore")
      
      cmd = "minArcStatus -f #{@@testFile1} | jq"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStatus")

      cmd = "minArcStatus --noserver -f #{@@testFile1} | jq .path"
      path = `#{cmd}`
      path = path.dup.gsub!('"', '').chop
      
      cmd = "\\mv -f #{path}/#{@@filename1_noext}.7z /tmp/minarc/tmp/"
      @@logger.debug(cmd)
      assert(system(cmd), "move file")

      cmd = "minArcReallocate -f /tmp/minarc/tmp/#{@@filename1_noext}.7z"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcReallocate")

      cmd = "minArcStatus -f #{@@testFile1} | jq"
      @@logger.debug(cmd)
      assert(system(cmd), "minArcStatus")

   end
   ## -----------------------------------------------------------
   
   ## -----------------------------------------------------------
   ##
   ## minARC inventory is not created
   ##
   def test_contingency
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      system("echo \'#{@@testFile1}\' > /tmp/#{@@testFile1}")
      assert(File.exist?("/tmp/#{@@testFile1}"), "test file in place")

      cmd = "minArcStore -t S2PDGS -f /tmp/#{@@testFile1} --noserver -m"
      puts
      @@logger.debug(cmd)
      puts
      assert(system(cmd), "minArcStore -t S2PDGS")


      ## -------------------------------------
      ## Remove the tables to induce errors 

      cmd = "minArcDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)
      
      ## -------------------------------------
      ## contingency with storing with move      
      system("echo \'#{@@testFile1}\' > /tmp/#{@@testFile1}")
      assert(File.exist?("/tmp/#{@@testFile1}"), "test file in place")

      cmd = "minArcStore -t S2PDGS -f /tmp/#{@@testFile1} --noserver -m"
      puts
      @@logger.debug(cmd)
      puts
      system(cmd)

      prevDir = Dir.pwd
      
      Dir.chdir(@@errorZone)
      
      arr = Dir["#{File.basename(@@testFile1, ".*")}*"] 
      assert(!arr.empty?, "test file in error zone")
      assert(!File.exist?("/tmp/#{arr[0]}"), "test file removed")

      Dir.chdir(prevDir)
      ## -------------------------------------

      ## -------------------------------------
      ## contingency with storing without move      
      system("echo \'#{@@testFile1}\' > /tmp/#{@@testFile1}")
      assert(File.exist?("/tmp/#{@@testFile1}"), "test file in place")

      cmd = "minArcStore -t S2PDGS -f /tmp/#{@@testFile1} --noserver"
      puts
      @@logger.debug(cmd)
      puts
      system(cmd)

      prevDir = Dir.pwd
      
      Dir.chdir(@@errorZone)
      
      arr = Dir["#{File.basename(@@testFile1, ".*")}*"] 
      puts arr
      assert(!arr.empty?, "test file in error zone")
      assert(!File.exist?("/tmp/#{arr[0]}"), "test file removed")

      Dir.chdir(prevDir)
      # -------------------------------------

      # To avoid errors at MINARC_UnitTests::teardown
      cmd = "minArcDB -c"
      ret = system(cmd)
      
   end
   ## -----------------------------------------------------------


   ## -----------------------------------------------------------


end


# =====================================================================

