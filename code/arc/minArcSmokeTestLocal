#!/usr/bin/env ruby

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'arc/MINARC_Client'

# Preconditions:
# - inventory database is created
# - minArcServer is running

#  1   - test_localcmd_store_plugin_S2PDGS
#  2   - test_localcmd_status_filename
#  3   - test_localcmd_retrieve_list
#  4   - test_localcmd_retrieve_file
#  5   - test_localcmd_minArcRetrieve_NEW_Files
#  6   - test_localcmd_retrieve_non_existing_file
#  7   - test_local_cmd_get_filetypes
#  8   - test_localcmd_delete
#  9   - test_localcmd_delete_nonexisting_file
# 10   - test_localcmd_retrieve_file_2_consumers
# 11   - test_localcmd_store

# need to distinguish error cases from curl (server not running) from file not found

class MINARC_SmokeTestLocal < Test::Unit::TestCase

   include CUC::DirUtils
   include ARC
   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   # --------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "MINARC Smoke Test Cases"
      puts
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
                  
      if c != 'Y' then
         exit(99)
      end
      
      @@testDataDir = File.join( File.dirname(File.expand_path(__FILE__)), "plugins/test" )
      @@testFile1   = "S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
            
   end
   
   # --------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "clean archive of files used during smoke tests"
         
      cmd = "minArcDelete --noserver -f #{File.basename(@@testFile1, ".*")}"
      
      puts cmd
      system(cmd)

      puts "end of test suite"      
      cmd = "rm -f #{@testFile1}"
      system(cmd)      
   end
   
   # --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      # load_config_development
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      puts "end of test-case"
   end
   # --------------------------------------------------------

   def test_localcmd_store_plugin_S2PDGS
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
      
      prevDir = Dir.pwd     
      Dir.chdir(@@testDataDir)
      cmd = "echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      system(cmd)
      Dir.chdir(prevDir)

      
      cmd = "minArcDelete --noserver -f #{File.basename(@@testFile1, ".*")}"
      system(cmd)

      cmd = "minArcStore -t S2PDGS -f #{@@testDataDir}/#{@@testFile1} -d -D --noserver"
      puts cmd
      assert(system(cmd), cmd)
   end
   # --------------------------------------------------------

   def test_localcmd_status_filename
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver"
      puts
      puts cmd
      puts
      assert(system(cmd), cmd)      
   end

   # --------------------------------------------------------

   def test_localcmd_retrieve_list
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
      cmd = "minArcRetrieve --noserver -l -f #{File.basename(@@testFile1, ".*")}"
      puts cmd
      assert(system(cmd), cmd)
   end

   # --------------------------------------------------------

   # --------------------------------------------------------

   def test_localcmd_retrieve_file
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
      
      test_localcmd_store_plugin_S2PDGS
      
      
      cmd = "minArcRetrieve --noserver -f #{File.basename(@@testFile1, ".*")}"
      puts cmd
      assert(system(cmd), cmd)
      
      arr = Dir["#{File.basename(@@testFile1, ".*")}*"]
      
      assert(arr.empty? == false)
      
      FileUtils.rm(arr[0])

      cmd = "minArcRetrieve --noserver -T"
      puts cmd
      assert(system(cmd), cmd)
      
      conf_minarc_server = ENV['MINARC_SERVER']
      
      ENV.delete('MINARC_SERVER')
      
      cmd = "minArcRetrieve -D -T"
      puts cmd
      assert(system(cmd), cmd)
      
      ENV['MINARC_SERVER'] = conf_minarc_server
      
   end

   # --------------------------------------------------------

   def test_localcmd_minArcRetrieve_NEW_Files
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
      
      prev_dir = Dir.pwd
      test_dir = "kakito_beach"
      
      if Dir.exist?(test_dir) == false then
         Dir.mkdir(test_dir)
      end
      
      Dir.chdir(test_dir)
      system("\\rm -rf *")
      
      queryDate = Time.new.utc - (3 * 60)
      
      cmd = "minArcRetrieve --noserver -N #{queryDate.strftime("%Y%m%dT%H%M%S")}"
      puts cmd
      assert(system(cmd), "#{cmd} => ${$?.exitstatus}")
      
      puts
      puts Dir["S2*"]
      puts Dir["S2*"].length
      puts
      
      assert(Dir["S2*"].length >= 1, "Incorrect number of files")
      
      if Dir["*"].length != 1 then
         puts Dir["S2*"]
      end
      
      system("\\rm -rf *")
            
      cmd = "minArcRetrieve --noserver -N 21000101T000000"
      puts cmd
      assert(system(cmd), "#{cmd} => ${$?.exitstatus}")   

      puts
      puts Dir["S2*"]
      puts Dir["S2*"].length
      puts
      
      assert(Dir["S2*"].length == 0, "Incorrect number of files")


      Dir.chdir(prev_dir)
      
      cmd = "\\rm -rf #{test_dir}"
      system(cmd)

   end

   # --------------------------------------------------------

   # verify exit code 99 when file does not exist
   def test_localcmd_retrieve_non_existing_file
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
      cmd = "minArcRetrieve --noserver -f toto"
      puts cmd
      assert(!system(cmd), "#{cmd} => ${$?.exitstatus}")      
   end

   # --------------------------------------------------------

   # get locally all filetypes
   
   def test_local_cmd_get_filetypes
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
   
      cmd = "minArcRetrieve -T --noserver"
      assert(system(cmd), cmd)
   end
   # --------------------------------------------------------


   def test_localcmd_delete
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
      cmd = "minArcDelete --noserver -f #{File.basename(@@testFile1, ".*")}"
      puts cmd
      assert(system(cmd), "minArcDelete")
   end

   # --------------------------------------------------------


   # --------------------------------------------------------
   
   def test_localcmd_delete_nonexisting_file
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
        
      cmd = "minArcDelete --noserver -f toto"
      puts cmd
      assert(!system(cmd), "minArcDelete non existing file")
   end

   # --------------------------------------------------------

   # --------------------------------------------------------
   # (same $PWD and same file retrieved into different locations)
   
   def test_localcmd_retrieve_file_2_consumers
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_SmokeTests::#{__method__.to_s}"
      puts
   
      puts "start preconditions"
      puts
      
      test_localcmd_store_plugin_S2PDGS
      
      puts
      puts "end preconditions"
      
      dir1 = "1.#{__method__.to_s}"
      dir2 = "2.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
         FileUtils.mkdir(dir2)
      rescue Errno::EEXIST => e
      
      end
   
      cmd1 = "minArcRetrieve -f #{File.basename(@@testFile1, ".*")} -L #{Dir.pwd}/#{dir1} --noserver"
      cmd2 = "minArcRetrieve -f #{File.basename(@@testFile1, ".*")} -L #{Dir.pwd}/#{dir2} --noserver"
   
      puts cmd1
      puts cmd2
   
      pid1 = spawn(cmd1)
      pid2 = spawn(cmd2)   
 
      arr = Process.waitall
         
      arr.each{|child|
            assert(child[1].exitstatus == 0, "minArcRetrieve")
       }

      arr = Dir["#{dir1}/#{File.basename(@@testFile1, ".*")}*"]
      assert(!arr.empty?, "Failed to retrieve file in #{dir1}")

      arr = Dir["#{dir2}/#{File.basename(@@testFile1, ".*")}*"]
      assert(!arr.empty?, "Failed to retrieve file in #{dir2}")
      
#      FileUtils.rm_rf("#{dir1}*",  :verbose => true)
#      FileUtils.rm_rf("#{dir2}*",  :verbose => true)
 
      cmd = "\\rm -rf #{dir1}*"
      system(cmd)
      
      cmd = "\\rm -rf #{dir2}*"
      system(cmd)
       
   end


   # --------------------------------------------------------


#   def test_localcmd_store
#      puts __method__.to_s
#      puts
#      puts "================================================"
#      puts "MINARC_SmokeTests::#{__method__.to_s}"
#      puts
#
#      cmd = "minArcStore -T"
#      assert(system(cmd), "minArcStore -T")
#      
#      cmd = "minArcStore -T --noserver"
#      assert(system(cmd), "minArcStore -T")
#
#      cmd = "minArcStore -v"
#      assert(system(cmd), "minArcStore -v")
#
#   end

   # -------------------------------------------------------------

   # -------------------------------------------------------------

end


# =====================================================================


# -----------------------------------------------------------


