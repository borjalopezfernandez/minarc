#!/usr/bin/env ruby

# == Synopsis
#
# This is a MINARC command line tool that retrieves file(s) from the Archive
# according to given criteria. 
# 
# 
# -f flag:
#
# This is a "selection criteria" flag. This option is used to specify the file to be retrieved. 
# Wildcards are allowed ; double quote them to avoid shell to expand the value (e.g. -f "S2*"). 
# If more than one file matches Rule flag is applied.
# This flag is not compatible with file-type flag "-t" and validity times.
#
#
# -t flag:  
#
# This is a "selection criteria flag" is used to specify the file-type of the file to be retrieved.
# This flag is not compatible with the filename selection flag "-f".
#
#
# -s flag:
#
# This flag is used specify the validity start of the file(s) to be retrieved.
# This flag must be specified together "-e" flag. See below "-e" flag specification.
#
#
# -e flag:
#
# This flag is used specify the validity end of the file(s) to be retrieved.
# This flag must be specified together "-s" flag. See above "-s" flag specification.
# 
#
# --boundary_start_on flag:
# This flag is used to specify that time criteria specified overlapping files 
# with validity start sooner than requested are discarded. 
# By default this flag is disabled.
# 
#
# --boundary_end_on flag:
# This flag is used to specify that time criteria specified overlapping files 
# with validity end later than requested are discarded. 
# By default this flag is disabled.
#
#
# -r flag:
#
# This flag determines the selection rule of the candidate files to be retrieved:
# ALL:   all files that fulfills the selection criteria are selected.
# FIRST: first file that fulfills the selection criteria is selected.
# LAST:  last file that fullfills the selection criteria is selected.
# OLDEST: file that has the smallest archive_date is selected.
# NEWEST: file that has the greatest archive_date is selected.
# By default if not specified, ALL rule is applied.
#
#
# -N YYYYMMDDThhmmss flag:
#
# This option selects files archived later (newer) than the specified date as argument 
#
#
# -L flag:
#
# This flag is used to specify Location (directory) in which selected files will be placed.
# No file retrieval is performed. This flag is not compatible with "-l" list
# flag (see below "-l" flag definition). 
#
#
# -l flag:
#
# This flag is used to list ONLY selected file(s) that would be retrieved.
# No file retrieval is performed. This flag is not compatible with "-d" delete
# flag (see below "-d" flag definition). 
#
#
# -d flag:
#
# Optional flag. This flag is used to delete specified selected file(s) after a retrieval.
# If file is not retrieved successfully from the Archive it is not deleted.
#
#
# -R flag:
# 
# Optional flag. It is used to specify that XML Reports should be generated for this execution.
# This flag must be followed by the full name and path of the report to generate.
#
# -r flag:
#
# Optional flag. Enables result filtering when retrieving by file-type.
# Available rules are : ALL, OLDEST, NEWEST.
# ALL : Default behavior ; returns all results.
# OLDEST : returns the result file having the oldest (smallest) archive date
# NEWEST : returns the result file having the most recent (greatest) archive date
#
#
# -H flag:
#
# Optional flag. This is the Hardlink flag. It is used to perform a Hardlink from the Archive
# to the file desired retrieval location (specified with -L flag). 
# Note that Archive and desired location directories must be in the same filesystem.
#
#
# -U flag:
#
# Optional flag, stands for "--Unpack".
# This is the Unpack flag. It is used to unpack/decompress files upon retrieval.
# The file format must be supported to perform the unpack action.
# The following formats are supported:
# - zip
# - tar
# - tgz
# - gz
# - 7z
#
# -T flag:
#
# This flag is used to show all archived file-types.
#
#
# -A flag:
#
# This flag is used to retrieve all archived files.
#
#
# -i flag:
#
# Optional flag. This is the inventory flag. It is used to retrieve an export of
# MINARC inventory in excel format driven by the other command line options (type, name, rule, etc)
#
#
# == Usage
# minArcRetrieve -t file-type -s <start> -e <end> -L <full_path_to_location> [-d] [-l]
#     --noserver                 operations are performed locally
#     --file <filename>          filename to be retrieved or correspondent wildcard -f "S2*"
#     --type <file-type>         it specifies the file-type of the file to be retrieved
#     --start <YYYYMMDDThhmmss>  
#     --end   <YYYYMMDDThhmmss>
#     --New   <YYYYMMDDThhmmss>
#     --Location <directory>     Directory in which retrieved file(s) will be copied
#     --Hardlink                 It performs a Hardlink rather than a copy from Archive
#     --All                      It retrieves all entries in the inventory
#     --Types                    it shows all file-types archived
#     --Unpack                   it unpacks the file
#     --inv <full path filename> It generates an export of the inventory in excel format
#     --Report <full filename>   Ask for report generation, full path and name of the report to generate.
#     --rule <filering-rule>     Enable result filtering
#     --delete                   enable delete flag
#     --list                     it lists the files that would be retrieved
#                                according to the selection criteria
#     --help                     shows this help
#     --usage                    shows the usage
#     --Debug                    shows Debug info during the execution
#     --version                  shows version number
#

require 'getoptlong'

require 'cuc/Log4rLoggerFactory'

require 'arc/MINARC_Environment'
require 'arc/MINARC_Client'
require 'arc/Inventory2Excel'


## MAIN script function
def main

   include ARC

   @full_path_target          = ""
   @full_report_name          = ""
   @filename                  = ""
   @filetype                  = ""
   startVal                   = ""
   endVal                     = ""
   archive_date               = nil
   @bHardLink                 = false
   @bUnpack                   = false
   sInv                       = ""
   bIncStart                  = false
   bIncEnd                    = false
   @isDebugMode               = false
   @bDelete                   = false
   @bListOnly                 = false
   rule                       = "ALL"
   bShowFileTypes             = false
   @bShowVersion              = false
   bGetAllFiles               = false
   @bNoServer                 = false
   @bShowUsage                = false
   @logger                    = nil

   arrRules = Array["ALL", "OLDEST", "NEWEST", "FIRST", "LAST"]
   
   opts = GetoptLong.new(
     ["--Location", "-L",              GetoptLong::REQUIRED_ARGUMENT],
     ["--file", "-f",                  GetoptLong::REQUIRED_ARGUMENT],
     ["--type", "-t",                  GetoptLong::REQUIRED_ARGUMENT],
     ["--start", "-s",                 GetoptLong::REQUIRED_ARGUMENT],
     ["--New", "-N",                   GetoptLong::REQUIRED_ARGUMENT],
     ["--end",   "-e",                 GetoptLong::REQUIRED_ARGUMENT],
     ["--Report", "-R",                GetoptLong::REQUIRED_ARGUMENT],
     ["--rule", "-r",                  GetoptLong::REQUIRED_ARGUMENT],
     ["--inv", "-i",                   GetoptLong::REQUIRED_ARGUMENT],
     ["--list", "-l",                  GetoptLong::NO_ARGUMENT],
     ["--noserver", "-n",              GetoptLong::NO_ARGUMENT],
     ["--delete", "-d",                GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",                 GetoptLong::NO_ARGUMENT],
     ["--Hardlink", "-H",              GetoptLong::NO_ARGUMENT],
     ["--Unpack", "-U",                GetoptLong::NO_ARGUMENT],
     ["--Types", "-T",                 GetoptLong::NO_ARGUMENT],
     ["--All", "-A",                   GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",                 GetoptLong::NO_ARGUMENT],
     ["--version", "-v",               GetoptLong::NO_ARGUMENT],
     ["--help", "-h",                  GetoptLong::NO_ARGUMENT],
     ["--boundary_start_on", "-S",     GetoptLong::NO_ARGUMENT],
     ["--boundary_end_on", "-E",       GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt      
            when "--Debug"             then @isDebugMode        = true
            when "--noserver"          then @bNoServer          = true
            when "--delete"            then @bDelete            = true
            when "--list"              then @bListOnly          = true
            when "--version"           then @bShowVersion       = true
	         when "--Location"          then @full_path_target   = arg.to_s
	         when "--Report"            then @full_report_name   = arg.to_s
	         when "--rule"              then rule                = arg.to_s.upcase
            when "--file"              then @filename           = arg.to_s
	         when "--type"              then @filetype           = arg.to_s
            when "--New"               then archive_date        = arg.to_s
            when "--start"             then startVal            = arg.to_s
            when "--end"               then endVal              = arg.to_s
			   when "--help"              then @bShowUsage         = true
	         when "--usage"             then @bShowUsage         = true
            when "--boundary_start_on" then bIncStart           = true
            when "--inv"               then sInv                = arg.to_s
            when "--boundary_end_on"   then bIncEnd             = true
            when "--Hardlink"          then @bHardLink          = true
            when "--Types"             then bShowFileTypes      = true
            when "--All"               then bGetAllFiles        = true
            when "--Unpack"            then @bUnpack            = true
         end
      end
   rescue Exception => e
      # puts e.to_s
      exit(0)
   end

   # -------------------------------------------------------
   #
   # Show the version of the component

   if @bShowVersion == true then
      print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{ARC::VERSION}]", "\n")
      hRecord = ARC::CHANGE_RECORD
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      exit(0)
   end
      
   # -------------------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end

   # -------------------------------------------------------

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   ## -------------------------------------------------------

   if !ENV['MINARC_SERVER'] then
      @bNoServer   = true
   end


   ## ------------------------------------------------------

   @minArcConfigDir       = ENV['MINARC_CONFIG']

   ## initialise the logger
   loggerFactory = CUC::Log4rLoggerFactory.new("Retrieve ", "#{@minArcConfigDir}/minarc_log_config.xml")
   
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
      
   @logger = loggerFactory.getLogger
   
   if @logger == nil then
      puts
		puts "Could not initialize logging system !  :-("
      puts "Check minARC logs configuration under \"#{@minArcConfigDir}/minarc_log_config.xml\"" 
		exit(99)
   end

   ## ------------------------------------------------------


   # -------------------------------------------------------
   
   # Check some flags and combinations

   if @filename == "" and @bListOnly == false and archive_date == nil and @full_path_target == "" and bShowFileTypes == false then
      puts "exit1"
      usage
      exit(66)
   end

 
   if @bDelete == true and @bListOnly == true and bShowFileTypes == false then
      puts "exit2"
      usage
      exit(66)
   end

   if @bListOnly == true and @full_path_target != "" and bShowFileTypes == false then
      puts "exit3"
      usage
      exit(66)
   end


   if @filename != "" and @filetype != "" and bGetAllFiles == false and bShowFileTypes == false then
      puts "exit4"
      usage
      exit(66)
   end

   # -------------------------------------------------------
   
   require 'arc/FileRetriever'
   
   if ENV['MINARC_SERVER'] and @bNoServer == false then
      @bRemoteMode = true
   else
      @bRemoteMode = false
      require 'arc/MINARC_DatabaseModel'
   end
 
   # -------------------------------------------------------
   #
   # Show the different file-types archived
    
   if bShowFileTypes then
      if @bRemoteMode == false then
         arrFiles = ArchivedFile.getFileTypes().sort
         arrFiles.each{|aFile|
            puts aFile.filetype
         }
         exit(0)
      else     
         arc = ARC::MINARC_Client.new(@logger)
         
         if @isDebugMode == true then
            arc.setDebugMode
         end
         
         ret = arc.getAllFileTypes

         if ret == false
            @logger.error("Could not get file-types from server")
            exit(99)
         else
            ret.split("\n").sort.each{|file| puts file}
            exit(0)
         end
      end
   end  
   # -------------------------------------------------------




   if @bListOnly == false and @full_path_target == "" then
      @full_path_target = Dir.pwd
      # usage
   end

   if (startVal != "" and endVal == "") or  (startVal == "" and endVal != "") then
      puts
      puts "Single-bounded intervals are not allowed..."
      puts
      usage
      exit(99)
   end



   if @filename != "" and rule != "ALL" then
      puts
      puts "Rules have no effects when retrieving a file by file-name :-|"
      puts
   end

   if !arrRules.include?(rule) then
      puts
      puts "Invalid rule : '#{rule}' !"
      puts
      usage      
   end

   if @bListOnly == false and @full_path_target.slice(0,1) != "/" then
      puts
      puts "Target directory must be specified with a full path"
      puts
      exit(99)
   end

   # -------------------------------------------------------
   #
   # If retrieval of multiple files is requested to the server

   if @bListOnly == false and @filename != "" and @bNoServer == false and \
      (@filename.include?("?") == true or @filename.include?("*") == true) then
      remote_get_multiple_files
      exit(0)
   end

   # -------------------------------------------------------

   dateExpr = "[0-9]{8}T[0-9]{6}"
   if (startVal != "" and endVal != "") and (startVal.match(dateExpr) == nil or endVal.match(dateExpr) == nil) then
      puts
      puts "Invalid date format..."
      puts
      usage
      exit(99)
   end

   begin
      if archive_date != nil then
         archive_date = Time.utc(archive_date.slice(0,4), archive_date.slice(4,2), archive_date.slice(6,2), archive_date.slice(9,2), archive_date.slice(11,2), archive_date.slice(13,2) )
         # archive_date = DateTime.parse(archive_date)
      end
   rescue Exception => e
      puts
      puts "Invalid date format #{archive_date} or value out of bounds..."
      puts
      puts e.to_s
      puts
      exit(99)
   end

# exit

   begin
      if startVal != "" and endVal != "" then
#         startVal = Time.utc(startVal.slice(0,4), startVal.slice(4,2), startVal.slice(6,2), startVal.slice(9,2), startVal.slice(11,2), startVal.slice(13,2) )
#         endVal   = Time.utc(endVal.slice(0,4), endVal.slice(4,2), endVal.slice(6,2), endVal.slice(9,2), endVal.slice(11,2), endVal.slice(13,2) )
         startVal = DateTime.parse(startVal)
         endVal   = DateTime.parse(endVal)
      end
   rescue Exception
      puts
      puts "Invalid date format or value out of bounds..."
      puts
      usage
   end

   if startVal != "" then
      if startVal > endVal then
         puts
         puts "Requested Start Time cannot be later than End Time ! :-p"
         puts
         exit(99)
      end
   end

   fileRetriever = ARC::FileRetriever.new(@bListOnly, @bNoServer, @logger)

   if @isDebugMode == true then
      fileRetriever.setDebugMode
   end

   if @full_report_name != "" then
      if @full_report_name.index('/') == nil or @full_report_name.index('/') != 0 then
         puts
         puts "Please specify a full path and name for the report file !"
         puts
         exit(99)   
      else
         fileRetriever.enableReporting(@full_report_name)
      end
   end

   fileRetriever.setRule(rule)

   ret = false

   if @filetype != "" then
      ret = fileRetriever.retrieve_by_type(@full_path_target, @filetype, startVal, endVal, @bDelete, bIncStart, bIncEnd, @bHardLink)
   end

   if @filename != "" then
      
      if @bNoServer == false then
         filename = @filename.gsub("*", "%2A")
      else
         filename = @filename.gsub("*", "%")
      end
                  
      ret = fileRetriever.retrieve_by_name(@full_path_target, filename, @bDelete, @bHardLink, @bUnpack)
   
      if ret == false then
         puts
         if @bNoServer == false then
            puts "#{File.basename(filename, ".*").gsub("%2A", "*")} not present in the archive :-|"
         else
            puts "#{File.basename(filename, ".*").gsub("%", "*")} not present in the archive :-|"
         end
         puts
      end
            
   end

   if archive_date != nil then
      ret = fileRetriever.retrieve_new_files(@full_path_target, archive_date, @bDelete, @bHardLink, @bUnpack)
   end

   if bGetAllFiles == true then
      ret = fileRetriever.retrieveAll(@full_path_target, @bDelete, @bHardLink, @bUnpack)
   end

   # -------------------------------------------------------
   # Create Excel-sheet with inventory export
   if sInv != "" then
      
      arrItems = fileRetriever.getLastSearchResult
      
      if @isDebugMode == true then
         puts arrItems
      end
      
      expExcel = ARC::Inventory2Excel.new(arrItems, sInv)
      
      if @isDebugMode == true then
         expExcel.setDebugMode
      end
  
      expExcel.export
            
   end
   # -------------------------------------------------------
   
   if ret == true then
      exit(0)
   else
      exit(99)
   end

end

#-------------------------------------------------------------

def remote_get_multiple_files
   if @isDebugMode == true then
      puts "minArcRetrieve::#{__method__.to_s}"
   end
   
   files = `minArcRetrieve -l -f "#{@filename}"`
   
   if @isDebugMode == true then
      puts "File to retrieve from server:"
      puts files
      puts
   end
   
   files.split("\n").each{|file|
      
      cmd = "minArcRetrieve -f #{file}"
      
      if @bUnpack == true then
         cmd = "#{cmd} -U"
      end

      if @isDebugMode == true then
         cmd = "#{cmd} -D"
         puts cmd
      end
      
      ret = system(cmd)
      
   }
   
end
## -------------------------------------------------------------

## Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)
      
   value = `#{"head -155 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
## -------------------------------------------------------------

## ===============================================================================
## Start of the main body
main
## End of the main body
## ===============================================================================
